{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MobiSyst ROS Packages Documentation Curent version: Ubuntu-22.install04 LTS / ROS2 iron Ubuntu-22.04 LTS First the OS on your machine: On a Raspberry Pi you can follows the guides: Ubuntu22.04 on A Pi3 computer On a x86 machine get help from the communty: official website - french community To configure a standard PC station: Ubuntu22.04 on a PC Station ROS2 dev. environment-22.04 LTS Some install script for classical install: install-ros-setup - only setup apt to target offical ROS repo. install-ros - install ROS iron from the official repo in desktop mode. install-gazebo - install ROS-Gazebo install-realsense - install dev. environement: RealSense Otherwize, you can go through the manual instructions or execute the appropriate install scrips in bin directory: Manual Installation git clone https://bitbucket.org/imt-mobisyst/mb6-space cd mb6-space This install process follows the instruction on docs.ros.org In short : sudo apt install -y curl software-properties-common sudo add-apt-repository universe -y sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update sudo apt install -y ros-dev-tools # ament-cmake-python Then install (use one of the options): sudo apt install -y ros-iron-ros-base # for minimal install sudo apt install -y ros-iron-desktop # for developers install (include visualtization etc.) sudo apt install -y ros-iron-desktop-full # for not missing anything You can setup your terminal with ROS2 environment: source /opt/ros/iron/setup.bash Hello-World with ROS2 This workspace include a default simple ROS package draft-mb6 into pkg-draft directory. You can build it with colcon build , then, inform your environment of the existance of new ROS resources source ./install/setup.bash . In fact, the run-commands.bash would also do the job ( source ./install/setup.bash ). You can make your own run-commands.bash and automitically source this on your terminal... echo \" # mb6 ROS environment: source ~/mb6-space/bin/run-commands.bash\" >> ~/.bashrc (optional) you can add a domain-id to allow several ROS2 virtual networks to work on a same phisical network ( doc ) export ROS_DOMAIN_ID=42 Push the source and export commands on your bashrc file. Finally launch a talker and a listerner in two terminals ros2 run draft_mb6 py_listerner and ros2 run draft_mb6 cpp_talker . For going further follow the draft tutorirals: ROS2 introduction package create python node cpp node Hokuyo Laser Range Just use the urg_node form the ROS urg_node package. It requires that the linux user is in dialout group. sudo apt install -y ros-iron-urg-node sudo usermod -a -G dialout `whoami` RealSense Use the vcpkg tool as recommended . cd git clone https://github.com/Microsoft/vcpkg.git .vcpkg ~/.vcpkg/bootstrap-vcpkg.sh ~/.vcpkg/vcpkg install realsense2 pip install pyrealsense2 You can connect the camera and test with ./bin/test-realsense-cam.py script. Gazebo Simulation ROS compliant version of gazebo can be installed from ros-iron-gazebo-xxx packeges. The install-gazebo script provide the list of usefull packages. More on Gazebo-Ros: docs.ros.org The IMT-MobiSyst simulated Robot is configured on a specific repo: git clone https://bitbucket.org/imt-mobisyst/pkg-tsim source ./bin/run-commands.bash ./bin/install-gazebo git clone https://bitbucket.org/imt-mobisyst/pkg-tsim colcon build Cuda IMT-Mobisyst packages Your mb6-space workspace is now ready to welcome robotic packages. Depending of your need, you can install and build the relevant mb6's packages... Robots functions The robot bases and modules relies on ros packages to install and built them: cd ~/mb6-space git clone git@bitbucket.org:imt-mobisyst/pkg-NAME pkg-NAME/bin/install colcon build TurtleBots : Package pkg-tbot (howevers, the packages are installed and configured on onboard Pi3 computer) Robulab : Package pkg-robulab AlpagaDrone Refers to mb6-playload/alpaga/ repositoty fetch : drone playload : Modules: The robot bases and modules relies on ros packages to install and built them: cd ~/mb6-space git clone git@bitbucket.org:imt-mobisyst/pkg-NAME pkg-NAME/bin/install colcon build pkg-toons To p o logical N avigation and S LAM regroups ROS2 packages that includes usefull elements for topological control of a mobile robot. pkg-viscene Vi sion based Scene regnition.","title":"Home"},{"location":"#mobisyst-ros-packages-documentation","text":"Curent version: Ubuntu-22.install04 LTS / ROS2 iron","title":"MobiSyst ROS Packages Documentation"},{"location":"#ubuntu-2204-lts","text":"First the OS on your machine: On a Raspberry Pi you can follows the guides: Ubuntu22.04 on A Pi3 computer On a x86 machine get help from the communty: official website - french community To configure a standard PC station: Ubuntu22.04 on a PC Station","title":"Ubuntu-22.04 LTS"},{"location":"#ros2-dev-environment-2204-lts","text":"Some install script for classical install: install-ros-setup - only setup apt to target offical ROS repo. install-ros - install ROS iron from the official repo in desktop mode. install-gazebo - install ROS-Gazebo install-realsense - install dev. environement: RealSense Otherwize, you can go through the manual instructions or execute the appropriate install scrips in bin directory:","title":"ROS2 dev. environment-22.04 LTS"},{"location":"#manual-installation","text":"git clone https://bitbucket.org/imt-mobisyst/mb6-space cd mb6-space This install process follows the instruction on docs.ros.org In short : sudo apt install -y curl software-properties-common sudo add-apt-repository universe -y sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update sudo apt install -y ros-dev-tools # ament-cmake-python Then install (use one of the options): sudo apt install -y ros-iron-ros-base # for minimal install sudo apt install -y ros-iron-desktop # for developers install (include visualtization etc.) sudo apt install -y ros-iron-desktop-full # for not missing anything You can setup your terminal with ROS2 environment: source /opt/ros/iron/setup.bash","title":"Manual Installation"},{"location":"#hello-world-with-ros2","text":"This workspace include a default simple ROS package draft-mb6 into pkg-draft directory. You can build it with colcon build , then, inform your environment of the existance of new ROS resources source ./install/setup.bash . In fact, the run-commands.bash would also do the job ( source ./install/setup.bash ). You can make your own run-commands.bash and automitically source this on your terminal... echo \" # mb6 ROS environment: source ~/mb6-space/bin/run-commands.bash\" >> ~/.bashrc (optional) you can add a domain-id to allow several ROS2 virtual networks to work on a same phisical network ( doc ) export ROS_DOMAIN_ID=42 Push the source and export commands on your bashrc file. Finally launch a talker and a listerner in two terminals ros2 run draft_mb6 py_listerner and ros2 run draft_mb6 cpp_talker . For going further follow the draft tutorirals: ROS2 introduction package create python node cpp node Hokuyo Laser Range Just use the urg_node form the ROS urg_node package. It requires that the linux user is in dialout group. sudo apt install -y ros-iron-urg-node sudo usermod -a -G dialout `whoami` RealSense Use the vcpkg tool as recommended . cd git clone https://github.com/Microsoft/vcpkg.git .vcpkg ~/.vcpkg/bootstrap-vcpkg.sh ~/.vcpkg/vcpkg install realsense2 pip install pyrealsense2 You can connect the camera and test with ./bin/test-realsense-cam.py script. Gazebo Simulation ROS compliant version of gazebo can be installed from ros-iron-gazebo-xxx packeges. The install-gazebo script provide the list of usefull packages. More on Gazebo-Ros: docs.ros.org The IMT-MobiSyst simulated Robot is configured on a specific repo: git clone https://bitbucket.org/imt-mobisyst/pkg-tsim source ./bin/run-commands.bash ./bin/install-gazebo git clone https://bitbucket.org/imt-mobisyst/pkg-tsim colcon build Cuda","title":"Hello-World with ROS2"},{"location":"#imt-mobisyst-packages","text":"Your mb6-space workspace is now ready to welcome robotic packages. Depending of your need, you can install and build the relevant mb6's packages...","title":"IMT-Mobisyst packages"},{"location":"#robots","text":"functions The robot bases and modules relies on ros packages to install and built them: cd ~/mb6-space git clone git@bitbucket.org:imt-mobisyst/pkg-NAME pkg-NAME/bin/install colcon build TurtleBots : Package pkg-tbot (howevers, the packages are installed and configured on onboard Pi3 computer) Robulab : Package pkg-robulab AlpagaDrone Refers to mb6-playload/alpaga/ repositoty fetch : drone playload :","title":"Robots"},{"location":"#modules","text":"The robot bases and modules relies on ros packages to install and built them: cd ~/mb6-space git clone git@bitbucket.org:imt-mobisyst/pkg-NAME pkg-NAME/bin/install colcon build pkg-toons To p o logical N avigation and S LAM regroups ROS2 packages that includes usefull elements for topological control of a mobile robot. pkg-viscene Vi sion based Scene regnition.","title":"Modules:"},{"location":"astuce-sudo/","text":"Jouer avec sudo sudo est parram\u00e9trable et permet d'autoriser finnement les acc\u00e9s et les droits des utilisateur sur les action senssible sur la machine. Le plus simple est de creer des fichiers de config sp\u00e9cifique dans le r\u00e9p\u00e9toire appropri\u00e9: sudo mkdir /etc/sudoers.d # si besoin sudo touch /etc/sudoers.d/myConfigs Autoriser une commande sp\u00e9cifique Il est possible d'autoriser un utilisateur sur une commande sp\u00e9cifique par exemple (la commande whereis xxx permet de r\u00e9cup\u00e9rer le chemin sur une commande xxx ): User ALL=(ALL:ALL) /path/cmd Et m\u00eame l'autoriser \u00e0 le faire sans mot de passe: User ALL=(ALL:ALL) NOPASSWD: /path/cmd Par exemple pour autoriser l'usage d'apt: sudo nano /etc/sudoers.d/apt #puis: bot ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt #et ctrl-s, ctrl-x pour sauver et quiter O\u00f9, si l'on veut \u00eatre plus sp\u00e9cifique: bot ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt upgrade","title":"Jouer avec sudo"},{"location":"astuce-sudo/#jouer-avec-sudo","text":"sudo est parram\u00e9trable et permet d'autoriser finnement les acc\u00e9s et les droits des utilisateur sur les action senssible sur la machine. Le plus simple est de creer des fichiers de config sp\u00e9cifique dans le r\u00e9p\u00e9toire appropri\u00e9: sudo mkdir /etc/sudoers.d # si besoin sudo touch /etc/sudoers.d/myConfigs","title":"Jouer avec sudo"},{"location":"astuce-sudo/#autoriser-une-commande-specifique","text":"Il est possible d'autoriser un utilisateur sur une commande sp\u00e9cifique par exemple (la commande whereis xxx permet de r\u00e9cup\u00e9rer le chemin sur une commande xxx ): User ALL=(ALL:ALL) /path/cmd Et m\u00eame l'autoriser \u00e0 le faire sans mot de passe: User ALL=(ALL:ALL) NOPASSWD: /path/cmd Par exemple pour autoriser l'usage d'apt: sudo nano /etc/sudoers.d/apt #puis: bot ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt #et ctrl-s, ctrl-x pour sauver et quiter O\u00f9, si l'on veut \u00eatre plus sp\u00e9cifique: bot ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt upgrade","title":"Autoriser une commande sp\u00e9cifique"},{"location":"astuce-systemd/","text":"Configurer systemd","title":"Configurer systemd"},{"location":"astuce-systemd/#configurer-systemd","text":"","title":"Configurer systemd"},{"location":"configure-pi3-DHCP/","text":"static ip eth0 systemd-networkd root@pibot22:$ sudo vim /etc/systemd/network/eth0-config.network [Match] Name=enxb827ebd3b57c [Link] Name=eth0 [Network] Address=192.168.1.1/24 Gateway=192.168.1.1 DNS=192.168.1.1 systemctl restart systemd-networkd networkctl list networkctl status Netplan static ip eth0 bot@pibot22:discovery(SUBNET),domain(22):~ $ cat /etc/netplan/50-cloud-init.yaml # This file is generated from information provided by the datasource. Changes # to it will not persist across an instance reboot. To disable cloud-init's # network configuration capabilities, write a file # /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following: # network: {config: disabled} network: version: 2 wifis: renderer: networkd wlan0: access-points: IoT IMT Nord Europe: password: c454079ec3ae4199b6bb654c299fa08a87c0923657e911a0c9be552e282a07eb dhcp4: true optional: true ethernets: renderer: networkd eth0: addresses: - 192.168.1.1/24 # DHCP server Kea sudo apt install kea root@pibot22:/etc/kea# cat kea-dhcp4.conf { DHCPv4 configuration starts on the next line \"Dhcp4\": { First we set up global values \"valid-lifetime\": 4000, \"renew-timer\": 1000, \"rebind-timer\": 2000, Next we set up the interfaces to be used by the server. \"interfaces-config\": { \"interfaces\": [ \"eth0\" ] }, And we specify the type of lease database \"lease-database\": { \"type\": \"memfile\", \"persist\": true, \"name\": \"/tmp/kea-leases4.csv\", \"lfc-interval\": 1800, \"max-row-errors\": 100 }, Finally, we list the subnets from which we will be leasing addresses. \"subnet4\": [ { \"subnet\": \"192.168.1.0/24\", \"pools\": [ { \"pool\": \"192.168.1.50 - 192.168.1.200\" } ] } ] DHCPv4 configuration ends with the next line } } ```","title":"static ip eth0 systemd-networkd"},{"location":"configure-pi3-DHCP/#static-ip-eth0-systemd-networkd","text":"root@pibot22:$ sudo vim /etc/systemd/network/eth0-config.network [Match] Name=enxb827ebd3b57c [Link] Name=eth0 [Network] Address=192.168.1.1/24 Gateway=192.168.1.1 DNS=192.168.1.1 systemctl restart systemd-networkd networkctl list networkctl status","title":"static ip eth0 systemd-networkd"},{"location":"configure-pi3-DHCP/#netplan-static-ip-eth0","text":"bot@pibot22:discovery(SUBNET),domain(22):~ $ cat /etc/netplan/50-cloud-init.yaml # This file is generated from information provided by the datasource. Changes # to it will not persist across an instance reboot. To disable cloud-init's # network configuration capabilities, write a file # /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following: # network: {config: disabled} network: version: 2 wifis: renderer: networkd wlan0: access-points: IoT IMT Nord Europe: password: c454079ec3ae4199b6bb654c299fa08a87c0923657e911a0c9be552e282a07eb dhcp4: true optional: true ethernets: renderer: networkd eth0: addresses: - 192.168.1.1/24 # DHCP server Kea sudo apt install kea root@pibot22:/etc/kea# cat kea-dhcp4.conf {","title":"Netplan static ip eth0"},{"location":"configure-pi3-DHCP/#dhcpv4-configuration-starts-on-the-next-line","text":"\"Dhcp4\": {","title":"DHCPv4 configuration starts on the next line"},{"location":"configure-pi3-DHCP/#first-we-set-up-global-values","text":"\"valid-lifetime\": 4000, \"renew-timer\": 1000, \"rebind-timer\": 2000,","title":"First we set up global values"},{"location":"configure-pi3-DHCP/#next-we-set-up-the-interfaces-to-be-used-by-the-server","text":"\"interfaces-config\": { \"interfaces\": [ \"eth0\" ] },","title":"Next we set up the interfaces to be used by the server."},{"location":"configure-pi3-DHCP/#and-we-specify-the-type-of-lease-database","text":"\"lease-database\": { \"type\": \"memfile\", \"persist\": true, \"name\": \"/tmp/kea-leases4.csv\", \"lfc-interval\": 1800, \"max-row-errors\": 100 },","title":"And we specify the type of lease database"},{"location":"configure-pi3-DHCP/#finally-we-list-the-subnets-from-which-we-will-be-leasing-addresses","text":"\"subnet4\": [ { \"subnet\": \"192.168.1.0/24\", \"pools\": [ { \"pool\": \"192.168.1.50 - 192.168.1.200\" } ] } ]","title":"Finally, we list the subnets from which we will be leasing addresses."},{"location":"configure-pi3-DHCP/#dhcpv4-configuration-ends-with-the-next-line","text":"} } ```","title":"DHCPv4 configuration ends with the next line"},{"location":"configure-pi3/","text":"OS Instalation on Pi3 Version Rasbery-Pi3 with Ubuntu 22.04. Need Raspberry Pi-Imager from www.raspberrypi.com (not from apt...). Ubuntu via imager: Select our os other general-purpose OS > Ubuntu 22.04 (SERVER 64-BIT) Select the SD-Card to overwrite set parameters (Advanced Options:) choose a pibot number XX between 20 and 80. hostname: 'pibotXX' enable SSH (password auth) username: bot password: bot LAN: IoT IMT Nord Europe : 72Hin@R* Try Custom Image : Section: Modify existing image on https://opensource.com/article/21/7/custom-raspberry-pi-image Install: You can process a classical install from install-pi3 script or go on Manual Install section. Attention, the script also install ROS in ros-base configuration and mb6 elements. cd git clone https://bitbucket.org/imt-mobisyst/mb6-space cd mb6-space ./bin/install-pi3 Manual Install: If necessary, update ntp serveurs conf and restart timesyncd service: date sudo nano /etc/systemd/timesyncd.comf sudo service systemd-timesyncd restart You can set: NTP=0.fr.pool.ntp.org 1.fr.pool.ntp.org 2.fr.pool.ntp.org 3.fr.pool.ntp.org Or fix manually the date: date sudo date -s \"2022-05-14 15:42:30\" sudo apt update Clone mb6-space : cd git config --global http.sslverify false git clone https://bitbucket.org/imt-mobisyst/mb6-space.git Update and get some soft: First configure apt needrestart from \"interactive\" (that promt an interactive windows to specify which services to resart after an apt update) to \"automatic\". Edit the /etc/needrestart/needrestart.conf file, to change the line #$nrconf{restart} = 'i'; to $nrconf{restart} = 'a'; . ## OR: sudo cp deps/install-pi3-needrestart.conf /etc/needrestart/needrestart.conf You can now use apt in a more silent and autonomous mode... sudo apt update sudo apt remove cloud-init sudo apt install -y build-essential meld sudo apt upgrade -y DHCP Server on Eth0: The idea is to permit a direct connexion between a Suppervision-machine and the tbot-machin. First set up a static configuration on your PI: Set static eth0 configuration, in /etc/netplan/ . sudo nano /etc/netplan/60-static-eth0.yaml # Static Configuration network: ethernets: renderer: networkd eth0: dhcp4: no addresses: - 192.168.1.1/24 version: 2 ## OR: sudo cp deps/install-pi3-60-static-eth0.yaml /etc/netplan/60-static-eth0.yam sudo netplan apply sudo cp deps/install-pi3-dhcpd.conf /etc/dhcp/dhcpd.conf``) sudo netplan apply Then inatll and configure isc-dhcp-server (To notice this server is deprecied from 2022) sudo apt install isc-dhcp-server Edit: /etc/dhcp/dhcpd.conf like: # This is a very basic subnet declaration. subnet 10.10.0.0 netmask 255.255.0.0 { range 10.10.1.20 10.10.1.80; option domain-name-servers 8.8.8.8, 8.8.4.4; option routers 10.10.1.1; } Set eth0 on /etc/default/isc-dhcp-server Interfaces v4. ## OR: sudo cp deps/install-pi3-dhcpd.conf /etc/dhcp/dhcpd.conf sudo cp deps/install-pi3-dhcp-server /etc/default/isc-dhcp-server sudo service isc-dhcp-server restart NotaBene: ethernet need to be connected at starttime (or isc-dhcp-server restarted)... To debug: systemctl status isc-dhcp-server.service # get the PID journalctl _PID=2690 The pibot is reachable in direct ethernet connexion (10.10.1.1 or pibotXX.local). Wifi To add Wifi nano /etc/netplan/50-cloud-init.yaml robotic workspace: You can return on README.md for more detail on ROS2 install. The script bin/install-ros-setup configure ubuntu for ROS installation. Then pibot relies on ros-base and urg-node . bin/install-ros-setup export ROSDISTRO=iron sudo apt install -y \\ ros-$ROSDISTRO-ros-base \\ ros-$ROSDISTRO-urg-node sudo usermod -a -G dialout `whoami` Your good to build mb6-space: source /opt/ros/iron/setup.bash colcon build Some specifics elements for Pi3: The specific run-commands to source is ./bin/pibot-run-commands.bash . It permits to set a specific ROS domain to the pibot . Edit ~/.bashrc , and add: # mb6 ROS environment: source ~/mb6-space/bin/pibot-run-commands.bash Current use of pibot: Configuration for turtlebot: Install pkg-tbot to get turtlebot drivers. system control Service creation: on linuxhandbook sudo cp ./resources/pibot.service /etc/systemd/system/ sudo systemctl daemon-reload sudo systemctl enable pibot.service","title":"OS Instalation on Pi3"},{"location":"configure-pi3/#os-instalation-on-pi3","text":"Version Rasbery-Pi3 with Ubuntu 22.04. Need Raspberry Pi-Imager from www.raspberrypi.com (not from apt...).","title":"OS Instalation on Pi3"},{"location":"configure-pi3/#ubuntu-via-imager","text":"Select our os other general-purpose OS > Ubuntu 22.04 (SERVER 64-BIT) Select the SD-Card to overwrite set parameters (Advanced Options:) choose a pibot number XX between 20 and 80. hostname: 'pibotXX' enable SSH (password auth) username: bot password: bot LAN: IoT IMT Nord Europe : 72Hin@R* Try Custom Image : Section: Modify existing image on https://opensource.com/article/21/7/custom-raspberry-pi-image","title":"Ubuntu via imager:"},{"location":"configure-pi3/#install","text":"You can process a classical install from install-pi3 script or go on Manual Install section. Attention, the script also install ROS in ros-base configuration and mb6 elements. cd git clone https://bitbucket.org/imt-mobisyst/mb6-space cd mb6-space ./bin/install-pi3","title":"Install:"},{"location":"configure-pi3/#manual-install","text":"If necessary, update ntp serveurs conf and restart timesyncd service: date sudo nano /etc/systemd/timesyncd.comf sudo service systemd-timesyncd restart You can set: NTP=0.fr.pool.ntp.org 1.fr.pool.ntp.org 2.fr.pool.ntp.org 3.fr.pool.ntp.org Or fix manually the date: date sudo date -s \"2022-05-14 15:42:30\" sudo apt update Clone mb6-space : cd git config --global http.sslverify false git clone https://bitbucket.org/imt-mobisyst/mb6-space.git Update and get some soft: First configure apt needrestart from \"interactive\" (that promt an interactive windows to specify which services to resart after an apt update) to \"automatic\". Edit the /etc/needrestart/needrestart.conf file, to change the line #$nrconf{restart} = 'i'; to $nrconf{restart} = 'a'; . ## OR: sudo cp deps/install-pi3-needrestart.conf /etc/needrestart/needrestart.conf You can now use apt in a more silent and autonomous mode... sudo apt update sudo apt remove cloud-init sudo apt install -y build-essential meld sudo apt upgrade -y","title":"Manual Install:"},{"location":"configure-pi3/#dhcp-server-on-eth0","text":"The idea is to permit a direct connexion between a Suppervision-machine and the tbot-machin. First set up a static configuration on your PI: Set static eth0 configuration, in /etc/netplan/ . sudo nano /etc/netplan/60-static-eth0.yaml # Static Configuration network: ethernets: renderer: networkd eth0: dhcp4: no addresses: - 192.168.1.1/24 version: 2 ## OR: sudo cp deps/install-pi3-60-static-eth0.yaml /etc/netplan/60-static-eth0.yam sudo netplan apply sudo cp deps/install-pi3-dhcpd.conf /etc/dhcp/dhcpd.conf``) sudo netplan apply Then inatll and configure isc-dhcp-server (To notice this server is deprecied from 2022) sudo apt install isc-dhcp-server Edit: /etc/dhcp/dhcpd.conf like: # This is a very basic subnet declaration. subnet 10.10.0.0 netmask 255.255.0.0 { range 10.10.1.20 10.10.1.80; option domain-name-servers 8.8.8.8, 8.8.4.4; option routers 10.10.1.1; } Set eth0 on /etc/default/isc-dhcp-server Interfaces v4. ## OR: sudo cp deps/install-pi3-dhcpd.conf /etc/dhcp/dhcpd.conf sudo cp deps/install-pi3-dhcp-server /etc/default/isc-dhcp-server sudo service isc-dhcp-server restart NotaBene: ethernet need to be connected at starttime (or isc-dhcp-server restarted)... To debug: systemctl status isc-dhcp-server.service # get the PID journalctl _PID=2690 The pibot is reachable in direct ethernet connexion (10.10.1.1 or pibotXX.local).","title":"DHCP Server on Eth0:"},{"location":"configure-pi3/#wifi","text":"To add Wifi nano /etc/netplan/50-cloud-init.yaml","title":"Wifi"},{"location":"configure-pi3/#robotic-workspace","text":"You can return on README.md for more detail on ROS2 install. The script bin/install-ros-setup configure ubuntu for ROS installation. Then pibot relies on ros-base and urg-node . bin/install-ros-setup export ROSDISTRO=iron sudo apt install -y \\ ros-$ROSDISTRO-ros-base \\ ros-$ROSDISTRO-urg-node sudo usermod -a -G dialout `whoami` Your good to build mb6-space: source /opt/ros/iron/setup.bash colcon build","title":"robotic workspace:"},{"location":"configure-pi3/#some-specifics-elements-for-pi3","text":"The specific run-commands to source is ./bin/pibot-run-commands.bash . It permits to set a specific ROS domain to the pibot . Edit ~/.bashrc , and add: # mb6 ROS environment: source ~/mb6-space/bin/pibot-run-commands.bash","title":"Some specifics elements for Pi3:"},{"location":"configure-pi3/#current-use-of-pibot","text":"","title":"Current use of pibot:"},{"location":"configure-pi3/#configuration-for-turtlebot","text":"Install pkg-tbot to get turtlebot drivers.","title":"Configuration for turtlebot:"},{"location":"configure-pi3/#system-control","text":"Service creation: on linuxhandbook sudo cp ./resources/pibot.service /etc/systemd/system/ sudo systemctl daemon-reload sudo systemctl enable pibot.service","title":"system control"},{"location":"configure-pi4/","text":"OS Instalation on Pi4","title":"OS Instalation on Pi4"},{"location":"configure-pi4/#os-instalation-on-pi4","text":"","title":"OS Instalation on Pi4"},{"location":"configure-station/","text":"OS Instalation on PC Work Station Configure the computer to have an homogene confs... Install Ubuntu-22.04 LTS with bot user (password bot ). (Installation minimale, avec mise \u00e0 jours et logiciels tiers, sur le disque entier) Wifi: IoT IMT Nord Europe : 72Hin@R* First login: If necessary, fix manually the date: date sudo date -s \"2022-05-14 15:42:30\" sudo apt update sudo apt upgrade sudo apt install -y openssh-server curl You can restart the machine and process to a classical install from install-station script or go on Manual Install section. Attention, the script also install ROS in desktop configuration. cd curl https://bitbucket.org/imt-mobisyst/mb6-space/raw/master/bin/install-station > install.bash bash install.bash rm install.bash Manual Install Install some usefull softs: sudo apt update sudo apt upgrade -y sudo apt install -y zsh git git-lfs davfs2 openssh-server \\ gnome-tweaks freecad prusa-slicer diodon \\ git git-lfs meld \\ build-essential check cmake default-jre \\ python3 python3-pip spyder \\ texlive texlive-base biber texlive-latex-recommended \\ texlive-publishers texlive-bibtex-extra texlive-science texlive-luatex \\ latexila pandoc wkhtmltopdf \\ gimp steam inkscape pip install zmq tqdm pytest beautifulsoup4 matplotlib Clone mb6-space: cd if [ ! -d \"mb6-space\" ]; then git config --global http.sslverify false git clone https://bitbucket.org/imt-mobisyst/mb6-space.git fi cd mb6-space One last software: sudo dpkg -i deps/code_1.79.2-1686734195_amd64.deb You also have to configure the user environemnt (i.e. default bash configurations) : echo \" # mb6 ROS environment: source ~/mb6-space/bin/run-commands.bash\" >> ~/.bashrc For conveignance you can setup some particular git configuration: git config --global user.name bot git config --global user.email mobisyst@imt-nord-europe.fr git config --global credential.helper cache git config --global http.sslVerify false git-lfs install That-it, you can return on the README.md file and process to ROS, RealSense and Gazebo installations. (or: ./bin/install-ros-setup ./bin/install-ros ./bin/install-realsense ./bin/install-gazebo )","title":"OS Instalation on PC Work Station"},{"location":"configure-station/#os-instalation-on-pc-work-station","text":"Configure the computer to have an homogene confs... Install Ubuntu-22.04 LTS with bot user (password bot ). (Installation minimale, avec mise \u00e0 jours et logiciels tiers, sur le disque entier) Wifi: IoT IMT Nord Europe : 72Hin@R*","title":"OS Instalation on PC Work Station"},{"location":"configure-station/#first-login","text":"If necessary, fix manually the date: date sudo date -s \"2022-05-14 15:42:30\" sudo apt update sudo apt upgrade sudo apt install -y openssh-server curl You can restart the machine and process to a classical install from install-station script or go on Manual Install section. Attention, the script also install ROS in desktop configuration. cd curl https://bitbucket.org/imt-mobisyst/mb6-space/raw/master/bin/install-station > install.bash bash install.bash rm install.bash","title":"First login:"},{"location":"configure-station/#manual-install","text":"Install some usefull softs: sudo apt update sudo apt upgrade -y sudo apt install -y zsh git git-lfs davfs2 openssh-server \\ gnome-tweaks freecad prusa-slicer diodon \\ git git-lfs meld \\ build-essential check cmake default-jre \\ python3 python3-pip spyder \\ texlive texlive-base biber texlive-latex-recommended \\ texlive-publishers texlive-bibtex-extra texlive-science texlive-luatex \\ latexila pandoc wkhtmltopdf \\ gimp steam inkscape pip install zmq tqdm pytest beautifulsoup4 matplotlib Clone mb6-space: cd if [ ! -d \"mb6-space\" ]; then git config --global http.sslverify false git clone https://bitbucket.org/imt-mobisyst/mb6-space.git fi cd mb6-space One last software: sudo dpkg -i deps/code_1.79.2-1686734195_amd64.deb You also have to configure the user environemnt (i.e. default bash configurations) : echo \" # mb6 ROS environment: source ~/mb6-space/bin/run-commands.bash\" >> ~/.bashrc For conveignance you can setup some particular git configuration: git config --global user.name bot git config --global user.email mobisyst@imt-nord-europe.fr git config --global credential.helper cache git config --global http.sslVerify false git-lfs install That-it, you can return on the README.md file and process to ROS, RealSense and Gazebo installations. (or: ./bin/install-ros-setup ./bin/install-ros ./bin/install-realsense ./bin/install-gazebo )","title":"Manual Install"},{"location":"configure-ubuntu/","text":"Configure Ubuntu Configure the computer to have an homogene confs... Install Ubuntu-22.04 LTS or derivate ( POP!_OS ) with bot user (password bot ) Change machine name (cf. Robot Names section) sudo nano /etc/hostname Grant bot with some access: sudo usermod -a -G dialout bot Configure Wifi: fleury wifi, password: 72Hin@R* optional: robot wifi: password: robotsdesmines ip : 10.1.16.XX, 20 < xx < 255 mask: 255.255.0.0 Passerel: 10.1.1.1, DNS 10.1.2.110,10.1.2.111 Update the machine: sudo apt update sudo apt upgrade sudo apt autoremove Some nice tools and libs: sudo apt -y install git ssh sshfs curl build-essential Initialize git: git config --global user.email \"imt-mobisyst@drods.net\" git config --global user.name bot@`hostname`","title":"Configure Ubuntu"},{"location":"configure-ubuntu/#configure-ubuntu","text":"Configure the computer to have an homogene confs... Install Ubuntu-22.04 LTS or derivate ( POP!_OS ) with bot user (password bot ) Change machine name (cf. Robot Names section) sudo nano /etc/hostname Grant bot with some access: sudo usermod -a -G dialout bot Configure Wifi: fleury wifi, password: 72Hin@R* optional: robot wifi: password: robotsdesmines ip : 10.1.16.XX, 20 < xx < 255 mask: 255.255.0.0 Passerel: 10.1.1.1, DNS 10.1.2.110,10.1.2.111 Update the machine: sudo apt update sudo apt upgrade sudo apt autoremove Some nice tools and libs: sudo apt -y install git ssh sshfs curl build-essential Initialize git: git config --global user.email \"imt-mobisyst@drods.net\" git config --global user.name bot@`hostname`","title":"Configure Ubuntu"},{"location":"doc-ips/","text":"Plage hors DHCP : 10.89.5.10 -> 10.89.5.50 Goupe A => 10.89.5.x1 avec x in [1..4] donc 4 IPs / groupe Groupe 1 : - pi3 10.89.5.11 - ned2 10.89.5.21 - pc fixe en DHCP mais pourrait prendre 10.89.5.31 - pc portable en DHCP mais pourrait prendre 10.89.5.41 Groupe 2 : - pi3 10.89.5.12 - ned2 10.89.5.22 - pc fixe en DHCP mais pourrait prendre 10.89.5.32 - pc portable en DHCP mais pourrait prendre 10.89.5.42","title":"Doc ips"},{"location":"old20.04-configure-pi3/","text":"Instalation de l'OS pour Pi3 Version Rasbery-Pi3 with Ubuntu 20.04. (id\u00e9al pour une cohabitation ROS/ROS2) Requi\u00e9re Raspberry Pi-Imager sudo apt install rpi-imager rpi-imager Ubuntu via l'imager: (cf. section Ubuntu manuel pour une alternative 'par les fichiers' ) Preparer une Pi from scratch: Dans imager: s\u00e9lectionner une image Ubuntu Server 20.04 lts 64bit (other general-purpose OS). selectionner la carte SD dans param\u00e9tres: hostname: pibot00.local enable SSH with password auth. set username/passord: bot/bot set lan: Pirate-INE/pine0kio ecrire la carte SD Premiere connection log (bot:bot): sudo su timedatectl timedatectl set-timezone Europe/Paris timedatectl set-time \"2022-07-07 12:00:30\" timedatectl apt update apt upgarde apt install git curl sshfs build-essential apt install avahi-deamon # for .local Il est normalement possible ensuite de se logger par le r\u00e9seaux: ssh bot@pibot00.local Few manual config For some strange resons the .local is activated only after a ping from the Pi to the Pi... ping -c 3 pibot00.local # Manually set date sudo date -s \"05/05/2022 15:42:30\" # or: timedatectl set-time \"2022-05-05 15:42:30\" # List wifi connections # should be connected to pirateINE sudo wpa_cli -i wlan0 list_networks # change wifi connection sudo wpa_cli -i wlan0 select_network network_id Instalation de ROS (1 and 2) ROS1 Then ROS (base version): doc sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add - sudo apt update sudo apt install -y ros-noetic-ros-base echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc source ~/.bashrc sudo apt install -y python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential sudo rosdep init rosdep update ROS2 And ROS2 doc Prepare: sudo apt update sudo apt install -y curl gnupg2 lsb-release sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\ -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null Install # ROS2 (foxy): sudo apt update sudo apt install -y ros-foxy-ros-base ros-foxy-demo-nodes-py ros-foxy-ros1-bridge echo \"source /opt/ros/foxy/setup.bash\" >> ~/.bashrc source ~/.bashrc But its seems no possible to have ROS1 and ROS2 in a same shell... Test : (into 2 terminals) ros2 run demo_nodes_py talker ros2 run demo_nodes_py listener bridge (ROS1-ROS2) (suppose linstallation du packet ros-foxy-ros1-bridge cf. section ROS2 ) Test bridge ( README ): #shell A source /opt/ros/noetic/setup.bash roscore & rosrun rospy_tutorials talker #shell B ros2 run ros1_bridge dynamic_bridge #shell C ros2 run demo_nodes_py listener \u00e0 noter, le dynamic_bridge porte bien son nom, le topic ROS1 apparait en ROS2 uniquement quant deux noeuds de pert et d'autre \u00e9changent des infos par le topic en question. Aleternative - Ubuntu manuel Saut\u00e9 si vous avais suivi la secion Avec Imager Preparer une Pi from scratch: Dans imager: s\u00e9lectionner une image Ubuntu Server 20.04 lts 64bit (other general-purpose OS). selectionner la carte SD ecrire la carte SD Configure the network (in network-config file) wifis: wlan0: dhcp4: true optional: true access-points: \"Pirate-INE\": password: \"pine0kio\" At first log (ubuntu:ubuntu): echo 'pibot00' > /etc/hostname adduser bot # with bot password usermod -a -G sudo bot usermod -a -G dialout bot sudo shutdown -r now Then: sudo userdel -r ubuntu Or... Set the user name and the hostname in user-data file chpasswd: expire: false list: - bot:bot hostname: pibot01","title":"Instalation de l'OS pour Pi3"},{"location":"old20.04-configure-pi3/#instalation-de-los-pour-pi3","text":"Version Rasbery-Pi3 with Ubuntu 20.04. (id\u00e9al pour une cohabitation ROS/ROS2) Requi\u00e9re Raspberry Pi-Imager sudo apt install rpi-imager rpi-imager","title":"Instalation de l'OS pour Pi3"},{"location":"old20.04-configure-pi3/#ubuntu-via-limager","text":"(cf. section Ubuntu manuel pour une alternative 'par les fichiers' ) Preparer une Pi from scratch: Dans imager: s\u00e9lectionner une image Ubuntu Server 20.04 lts 64bit (other general-purpose OS). selectionner la carte SD dans param\u00e9tres: hostname: pibot00.local enable SSH with password auth. set username/passord: bot/bot set lan: Pirate-INE/pine0kio ecrire la carte SD","title":"Ubuntu via l'imager:"},{"location":"old20.04-configure-pi3/#premiere-connection-log-botbot","text":"sudo su timedatectl timedatectl set-timezone Europe/Paris timedatectl set-time \"2022-07-07 12:00:30\" timedatectl apt update apt upgarde apt install git curl sshfs build-essential apt install avahi-deamon # for .local Il est normalement possible ensuite de se logger par le r\u00e9seaux: ssh bot@pibot00.local","title":"Premiere connection log (bot:bot):"},{"location":"old20.04-configure-pi3/#few-manual-config","text":"For some strange resons the .local is activated only after a ping from the Pi to the Pi... ping -c 3 pibot00.local # Manually set date sudo date -s \"05/05/2022 15:42:30\" # or: timedatectl set-time \"2022-05-05 15:42:30\" # List wifi connections # should be connected to pirateINE sudo wpa_cli -i wlan0 list_networks # change wifi connection sudo wpa_cli -i wlan0 select_network network_id","title":"Few manual config"},{"location":"old20.04-configure-pi3/#instalation-de-ros-1-and-2","text":"","title":"Instalation de ROS (1 and 2)"},{"location":"old20.04-configure-pi3/#ros1","text":"Then ROS (base version): doc sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add - sudo apt update sudo apt install -y ros-noetic-ros-base echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc source ~/.bashrc sudo apt install -y python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential sudo rosdep init rosdep update","title":"ROS1"},{"location":"old20.04-configure-pi3/#ros2","text":"And ROS2 doc Prepare: sudo apt update sudo apt install -y curl gnupg2 lsb-release sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\ -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null Install # ROS2 (foxy): sudo apt update sudo apt install -y ros-foxy-ros-base ros-foxy-demo-nodes-py ros-foxy-ros1-bridge echo \"source /opt/ros/foxy/setup.bash\" >> ~/.bashrc source ~/.bashrc But its seems no possible to have ROS1 and ROS2 in a same shell... Test : (into 2 terminals) ros2 run demo_nodes_py talker ros2 run demo_nodes_py listener","title":"ROS2"},{"location":"old20.04-configure-pi3/#bridge-ros1-ros2","text":"(suppose linstallation du packet ros-foxy-ros1-bridge cf. section ROS2 ) Test bridge ( README ): #shell A source /opt/ros/noetic/setup.bash roscore & rosrun rospy_tutorials talker #shell B ros2 run ros1_bridge dynamic_bridge #shell C ros2 run demo_nodes_py listener \u00e0 noter, le dynamic_bridge porte bien son nom, le topic ROS1 apparait en ROS2 uniquement quant deux noeuds de pert et d'autre \u00e9changent des infos par le topic en question.","title":"bridge (ROS1-ROS2)"},{"location":"old20.04-configure-pi3/#aleternative-ubuntu-manuel","text":"Saut\u00e9 si vous avais suivi la secion Avec Imager Preparer une Pi from scratch: Dans imager: s\u00e9lectionner une image Ubuntu Server 20.04 lts 64bit (other general-purpose OS). selectionner la carte SD ecrire la carte SD Configure the network (in network-config file) wifis: wlan0: dhcp4: true optional: true access-points: \"Pirate-INE\": password: \"pine0kio\" At first log (ubuntu:ubuntu): echo 'pibot00' > /etc/hostname adduser bot # with bot password usermod -a -G sudo bot usermod -a -G dialout bot sudo shutdown -r now Then: sudo userdel -r ubuntu Or... Set the user name and the hostname in user-data file chpasswd: expire: false list: - bot:bot hostname: pibot01","title":"Aleternative - Ubuntu manuel"}]}