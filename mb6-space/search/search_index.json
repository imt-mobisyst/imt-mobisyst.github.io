{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MobiSyst ROS2 Workspace - Documentation Curent version: Ubuntu-22.install04 LTS / ROS2 iron mb6-space regroups elements for playing with the mobile robots of IMT Nord Europe. It is the master project on the top off sub-projects, dedicated to robots platform, software modules or scenario applications. It does not include code but mostly documentation and command tools. Install You can first clone the mb6-space repo, and configure your shell... pip install toml toml-cli git clone https://github.com/imt-mobisyst/mb6-space.git cd mb6-space ./bin/set-mb6-bashrc source ./bin/run-commands.bash Then, you will mainlly need ROS2 . You can rely on install section in the navigation bar to get specific instruction depending on the targeted machine. On a x86 machine you also can get help from the communty: official website - french community Some install script for classical install: install-ros - setup apt to target offical ROS repo and install ros minimal elements install-gazebo - install ROS-Gazebo install-realsense - install dev. environement: RealSense Otherwize, you can go through the manual instructions or execute the appropriate install scrips in bin directory: Get started. ROS2 works with several environement variables. You can change the variables easily by editing your ./config.toml and source again the ./bin/run-commands.bash . gedit ./config.toml sources ./bin/run-commands.bash One simple example for ros package to install is pkg-basic defining basic functionalities. To notice that most of our packages come with an install script for dependencies. so: git clone https://github.com/imt-mobisyst/pkg-basic.git ./pkg-basic/bin/install colcon build sources ./bin/run-commands.bash ros2 launch basic_node parasit_launch.yaml The same install instructions can be applied to most of the MobiSyst ROS2 packages.","title":"Home"},{"location":"#mobisyst-ros2-workspace-documentation","text":"Curent version: Ubuntu-22.install04 LTS / ROS2 iron mb6-space regroups elements for playing with the mobile robots of IMT Nord Europe. It is the master project on the top off sub-projects, dedicated to robots platform, software modules or scenario applications. It does not include code but mostly documentation and command tools.","title":"MobiSyst ROS2 Workspace - Documentation"},{"location":"#install","text":"You can first clone the mb6-space repo, and configure your shell... pip install toml toml-cli git clone https://github.com/imt-mobisyst/mb6-space.git cd mb6-space ./bin/set-mb6-bashrc source ./bin/run-commands.bash Then, you will mainlly need ROS2 . You can rely on install section in the navigation bar to get specific instruction depending on the targeted machine. On a x86 machine you also can get help from the communty: official website - french community Some install script for classical install: install-ros - setup apt to target offical ROS repo and install ros minimal elements install-gazebo - install ROS-Gazebo install-realsense - install dev. environement: RealSense Otherwize, you can go through the manual instructions or execute the appropriate install scrips in bin directory:","title":"Install"},{"location":"#get-started","text":"ROS2 works with several environement variables. You can change the variables easily by editing your ./config.toml and source again the ./bin/run-commands.bash . gedit ./config.toml sources ./bin/run-commands.bash One simple example for ros package to install is pkg-basic defining basic functionalities. To notice that most of our packages come with an install script for dependencies. so: git clone https://github.com/imt-mobisyst/pkg-basic.git ./pkg-basic/bin/install colcon build sources ./bin/run-commands.bash ros2 launch basic_node parasit_launch.yaml The same install instructions can be applied to most of the MobiSyst ROS2 packages.","title":"Get started."},{"location":"configure-pi3-DHCP/","text":"static ip eth0 systemd-networkd root@pibot22:$ sudo vim /etc/systemd/network/eth0-config.network [Match] Name=enxb827ebd3b57c [Link] Name=eth0 [Network] Address=192.168.1.1/24 Gateway=192.168.1.1 DNS=192.168.1.1 systemctl restart systemd-networkd networkctl list networkctl status Netplan static ip eth0 bot@pibot22:discovery(SUBNET),domain(22):~ $ cat /etc/netplan/50-cloud-init.yaml # This file is generated from information provided by the datasource. Changes # to it will not persist across an instance reboot. To disable cloud-init's # network configuration capabilities, write a file # /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following: # network: {config: disabled} network: version: 2 wifis: renderer: networkd wlan0: access-points: IoT IMT Nord Europe: password: c454079ec3ae4199b6bb654c299fa08a87c0923657e911a0c9be552e282a07eb dhcp4: true optional: true ethernets: renderer: networkd eth0: addresses: - 192.168.1.1/24 # DHCP server Kea sudo apt install kea root@pibot22:/etc/kea# cat kea-dhcp4.conf { DHCPv4 configuration starts on the next line \"Dhcp4\": { First we set up global values \"valid-lifetime\": 4000, \"renew-timer\": 1000, \"rebind-timer\": 2000, Next we set up the interfaces to be used by the server. \"interfaces-config\": { \"interfaces\": [ \"eth0\" ] }, And we specify the type of lease database \"lease-database\": { \"type\": \"memfile\", \"persist\": true, \"name\": \"/tmp/kea-leases4.csv\", \"lfc-interval\": 1800, \"max-row-errors\": 100 }, Finally, we list the subnets from which we will be leasing addresses. \"subnet4\": [ { \"subnet\": \"192.168.1.0/24\", \"pools\": [ { \"pool\": \"192.168.1.50 - 192.168.1.200\" } ] } ] DHCPv4 configuration ends with the next line } } ```","title":"static ip eth0 systemd-networkd"},{"location":"configure-pi3-DHCP/#static-ip-eth0-systemd-networkd","text":"root@pibot22:$ sudo vim /etc/systemd/network/eth0-config.network [Match] Name=enxb827ebd3b57c [Link] Name=eth0 [Network] Address=192.168.1.1/24 Gateway=192.168.1.1 DNS=192.168.1.1 systemctl restart systemd-networkd networkctl list networkctl status","title":"static ip eth0 systemd-networkd"},{"location":"configure-pi3-DHCP/#netplan-static-ip-eth0","text":"bot@pibot22:discovery(SUBNET),domain(22):~ $ cat /etc/netplan/50-cloud-init.yaml # This file is generated from information provided by the datasource. Changes # to it will not persist across an instance reboot. To disable cloud-init's # network configuration capabilities, write a file # /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following: # network: {config: disabled} network: version: 2 wifis: renderer: networkd wlan0: access-points: IoT IMT Nord Europe: password: c454079ec3ae4199b6bb654c299fa08a87c0923657e911a0c9be552e282a07eb dhcp4: true optional: true ethernets: renderer: networkd eth0: addresses: - 192.168.1.1/24 # DHCP server Kea sudo apt install kea root@pibot22:/etc/kea# cat kea-dhcp4.conf {","title":"Netplan static ip eth0"},{"location":"configure-pi3-DHCP/#dhcpv4-configuration-starts-on-the-next-line","text":"\"Dhcp4\": {","title":"DHCPv4 configuration starts on the next line"},{"location":"configure-pi3-DHCP/#first-we-set-up-global-values","text":"\"valid-lifetime\": 4000, \"renew-timer\": 1000, \"rebind-timer\": 2000,","title":"First we set up global values"},{"location":"configure-pi3-DHCP/#next-we-set-up-the-interfaces-to-be-used-by-the-server","text":"\"interfaces-config\": { \"interfaces\": [ \"eth0\" ] },","title":"Next we set up the interfaces to be used by the server."},{"location":"configure-pi3-DHCP/#and-we-specify-the-type-of-lease-database","text":"\"lease-database\": { \"type\": \"memfile\", \"persist\": true, \"name\": \"/tmp/kea-leases4.csv\", \"lfc-interval\": 1800, \"max-row-errors\": 100 },","title":"And we specify the type of lease database"},{"location":"configure-pi3-DHCP/#finally-we-list-the-subnets-from-which-we-will-be-leasing-addresses","text":"\"subnet4\": [ { \"subnet\": \"192.168.1.0/24\", \"pools\": [ { \"pool\": \"192.168.1.50 - 192.168.1.200\" } ] } ]","title":"Finally, we list the subnets from which we will be leasing addresses."},{"location":"configure-pi3-DHCP/#dhcpv4-configuration-ends-with-the-next-line","text":"} } ```","title":"DHCPv4 configuration ends with the next line"},{"location":"configure-pi3/","text":"OS Instalation on Pi3 Version: Ubuntu 22.04 - ROS2 iron. This version is dedicatd to work with Turtlebot platform, combinated they form a pibot . Need Raspberry Pi-Imager from www.raspberrypi.com (not from apt...). Ubuntu via imager: Select our os other general-purpose OS > Ubuntu 22.04 (SERVER 64-BIT) Select the SD-Card to overwrite set parameters (Advanced Options:) choose a pibot number XX between 20 and 80. hostname: 'pibotXX' enable SSH (password auth) username: bot password: x2 LAN: IoT IMT Nord Europe : Try Custom Image : Section: Modify existing image on https://opensource.com/article/21/7/custom-raspberry-pi-image Install: You can process a classical install from install-pi3 script or go on Manual Install section. Attention, the script also install ROS in ros-base configuration and mb6 elements. cd git clone https://github.com/imt-mobisyst/mb6-space cd mb6-space ./bin/install-pi3 After installation, pibotXX will be accecible on the IP 10.89.5.XX (reserved DHCP range: \\([10.89.5.10 \\rightarrow 10.89.5.50]\\) ). Manual Install: Not up-to-date , please refer directly to the install script... If necessary, update ntp serveurs conf and restart timesyncd service: date sudo nano /etc/systemd/timesyncd.comf sudo service systemd-timesyncd restart You can set: NTP=0.fr.pool.ntp.org 1.fr.pool.ntp.org 2.fr.pool.ntp.org 3.fr.pool.ntp.org Or fix manually the date: date sudo date -s \"2022-05-14 15:42:30\" sudo apt update Clone mb6-space : cd git config --global http.sslverify false git clone https://github.com/imt-mobisyst/mb6-space.git Update and get some soft: First configure apt needrestart from \"interactive\" (that promt an interactive windows to specify which services to resart after an apt update) to \"automatic\". Edit the /etc/needrestart/needrestart.conf file, to change the line #$nrconf{restart} = 'i'; to $nrconf{restart} = 'a'; . ## OR: sudo cp deps/install-pi3-needrestart.conf /etc/needrestart/needrestart.conf You can now use apt in a more silent and autonomous mode... sudo apt update sudo apt remove cloud-init sudo apt install -y build-essential meld sudo apt upgrade -y DHCP Server on Eth0: The idea is to permit a direct connexion between a Suppervision-machine and the tbot-machin. First set up a static configuration on your PI: Set static eth0 configuration, in /etc/netplan/ . sudo nano /etc/netplan/60-static-eth0.yaml # Static Configuration network: ethernets: renderer: networkd eth0: dhcp4: no addresses: - 192.168.1.1/24 version: 2 ## OR: sudo cp deps/install-pi3-60-static-eth0.yaml /etc/netplan/60-static-eth0.yam sudo netplan apply sudo cp deps/install-pi3-dhcpd.conf /etc/dhcp/dhcpd.conf``) sudo netplan apply Then inatll and configure isc-dhcp-server (To notice this server is deprecied from 2022) sudo apt install isc-dhcp-server Edit: /etc/dhcp/dhcpd.conf like: # This is a very basic subnet declaration. subnet 10.10.0.0 netmask 255.255.0.0 { range 10.10.1.20 10.10.1.80; option domain-name-servers 8.8.8.8, 8.8.4.4; option routers 10.10.1.1; } Set eth0 on /etc/default/isc-dhcp-server Interfaces v4. ## OR: sudo cp deps/install-pi3-dhcpd.conf /etc/dhcp/dhcpd.conf sudo cp deps/install-pi3-dhcp-server /etc/default/isc-dhcp-server sudo service isc-dhcp-server restart NotaBene: ethernet need to be connected at starttime (or isc-dhcp-server restarted)... To debug: systemctl status isc-dhcp-server.service # get the PID journalctl _PID=2690 The pibot is reachable in direct ethernet connexion (10.10.1.1 or pibotXX.local). Wifi To add Wifi nano /etc/netplan/50-cloud-init.yaml robotic workspace: You can return on README.md for more detail on ROS2 install. The script bin/install-ros configure ubuntu for ROS installation and install ros-base . Then pibot relies on urg-node . bin/install-ros export ROS_DISTRO=iron sudo apt install -y \\ ros-$ROS_DISTRO-urg-node sudo usermod -a -G dialout `whoami` Your good to build mb6-space: source /opt/ros/iron/setup.bash colcon build Some specifics elements for Pi3: The specific run-commands to source is ./bin/pibot-run-commands.bash . It permits to set a specific ROS domain to the pibot . Edit ~/.bashrc , and add: # mb6 ROS environment: source ~/mb6-space/bin/pibot-run-commands.bash Current use of pibot: Configuration for turtlebot: Install pkg-tbot to get turtlebot drivers. system control Service creation: on linuxhandbook sudo cp ./resources/pibot.service /etc/systemd/system/ sudo systemctl daemon-reload sudo systemctl enable pibot.service","title":"On Pi3"},{"location":"configure-pi3/#os-instalation-on-pi3","text":"Version: Ubuntu 22.04 - ROS2 iron. This version is dedicatd to work with Turtlebot platform, combinated they form a pibot . Need Raspberry Pi-Imager from www.raspberrypi.com (not from apt...).","title":"OS Instalation on Pi3"},{"location":"configure-pi3/#ubuntu-via-imager","text":"Select our os other general-purpose OS > Ubuntu 22.04 (SERVER 64-BIT) Select the SD-Card to overwrite set parameters (Advanced Options:) choose a pibot number XX between 20 and 80. hostname: 'pibotXX' enable SSH (password auth) username: bot password: x2 LAN: IoT IMT Nord Europe : Try Custom Image : Section: Modify existing image on https://opensource.com/article/21/7/custom-raspberry-pi-image","title":"Ubuntu via imager:"},{"location":"configure-pi3/#install","text":"You can process a classical install from install-pi3 script or go on Manual Install section. Attention, the script also install ROS in ros-base configuration and mb6 elements. cd git clone https://github.com/imt-mobisyst/mb6-space cd mb6-space ./bin/install-pi3 After installation, pibotXX will be accecible on the IP 10.89.5.XX (reserved DHCP range: \\([10.89.5.10 \\rightarrow 10.89.5.50]\\) ).","title":"Install:"},{"location":"configure-pi3/#manual-install","text":"Not up-to-date , please refer directly to the install script... If necessary, update ntp serveurs conf and restart timesyncd service: date sudo nano /etc/systemd/timesyncd.comf sudo service systemd-timesyncd restart You can set: NTP=0.fr.pool.ntp.org 1.fr.pool.ntp.org 2.fr.pool.ntp.org 3.fr.pool.ntp.org Or fix manually the date: date sudo date -s \"2022-05-14 15:42:30\" sudo apt update Clone mb6-space : cd git config --global http.sslverify false git clone https://github.com/imt-mobisyst/mb6-space.git Update and get some soft: First configure apt needrestart from \"interactive\" (that promt an interactive windows to specify which services to resart after an apt update) to \"automatic\". Edit the /etc/needrestart/needrestart.conf file, to change the line #$nrconf{restart} = 'i'; to $nrconf{restart} = 'a'; . ## OR: sudo cp deps/install-pi3-needrestart.conf /etc/needrestart/needrestart.conf You can now use apt in a more silent and autonomous mode... sudo apt update sudo apt remove cloud-init sudo apt install -y build-essential meld sudo apt upgrade -y","title":"Manual Install:"},{"location":"configure-pi3/#dhcp-server-on-eth0","text":"The idea is to permit a direct connexion between a Suppervision-machine and the tbot-machin. First set up a static configuration on your PI: Set static eth0 configuration, in /etc/netplan/ . sudo nano /etc/netplan/60-static-eth0.yaml # Static Configuration network: ethernets: renderer: networkd eth0: dhcp4: no addresses: - 192.168.1.1/24 version: 2 ## OR: sudo cp deps/install-pi3-60-static-eth0.yaml /etc/netplan/60-static-eth0.yam sudo netplan apply sudo cp deps/install-pi3-dhcpd.conf /etc/dhcp/dhcpd.conf``) sudo netplan apply Then inatll and configure isc-dhcp-server (To notice this server is deprecied from 2022) sudo apt install isc-dhcp-server Edit: /etc/dhcp/dhcpd.conf like: # This is a very basic subnet declaration. subnet 10.10.0.0 netmask 255.255.0.0 { range 10.10.1.20 10.10.1.80; option domain-name-servers 8.8.8.8, 8.8.4.4; option routers 10.10.1.1; } Set eth0 on /etc/default/isc-dhcp-server Interfaces v4. ## OR: sudo cp deps/install-pi3-dhcpd.conf /etc/dhcp/dhcpd.conf sudo cp deps/install-pi3-dhcp-server /etc/default/isc-dhcp-server sudo service isc-dhcp-server restart NotaBene: ethernet need to be connected at starttime (or isc-dhcp-server restarted)... To debug: systemctl status isc-dhcp-server.service # get the PID journalctl _PID=2690 The pibot is reachable in direct ethernet connexion (10.10.1.1 or pibotXX.local).","title":"DHCP Server on Eth0:"},{"location":"configure-pi3/#wifi","text":"To add Wifi nano /etc/netplan/50-cloud-init.yaml","title":"Wifi"},{"location":"configure-pi3/#robotic-workspace","text":"You can return on README.md for more detail on ROS2 install. The script bin/install-ros configure ubuntu for ROS installation and install ros-base . Then pibot relies on urg-node . bin/install-ros export ROS_DISTRO=iron sudo apt install -y \\ ros-$ROS_DISTRO-urg-node sudo usermod -a -G dialout `whoami` Your good to build mb6-space: source /opt/ros/iron/setup.bash colcon build","title":"robotic workspace:"},{"location":"configure-pi3/#some-specifics-elements-for-pi3","text":"The specific run-commands to source is ./bin/pibot-run-commands.bash . It permits to set a specific ROS domain to the pibot . Edit ~/.bashrc , and add: # mb6 ROS environment: source ~/mb6-space/bin/pibot-run-commands.bash","title":"Some specifics elements for Pi3:"},{"location":"configure-pi3/#current-use-of-pibot","text":"","title":"Current use of pibot:"},{"location":"configure-pi3/#configuration-for-turtlebot","text":"Install pkg-tbot to get turtlebot drivers.","title":"Configuration for turtlebot:"},{"location":"configure-pi3/#system-control","text":"Service creation: on linuxhandbook sudo cp ./resources/pibot.service /etc/systemd/system/ sudo systemctl daemon-reload sudo systemctl enable pibot.service","title":"system control"},{"location":"configure-pi4/","text":"OS Instalation on Pi4","title":"On Pi4"},{"location":"configure-pi4/#os-instalation-on-pi4","text":"","title":"OS Instalation on Pi4"},{"location":"configure-station/","text":"OS Instalation on PC Work Station Configure the computer to have an homogene confs... Install Ubuntu-22.04 LTS with bot user (password bot ). (Installation minimale, avec mise \u00e0 jours et logiciels tiers, sur le disque entier) Wifi: IoT IMT Nord Europe First login: You can process to a classical install from install-station script or go on Manual Install section. Attention, the script also install ROS in desktop configuration. cd git clone https://github.com/imt-mobisyst/mb6-space cd mb6-spqce .bin/install-station Manual Install Well, install-station script into an editor, and process the command manually. Comment in the scripts helps to adapt the installation you want. First login:","title":"Station"},{"location":"configure-station/#os-instalation-on-pc-work-station","text":"Configure the computer to have an homogene confs... Install Ubuntu-22.04 LTS with bot user (password bot ). (Installation minimale, avec mise \u00e0 jours et logiciels tiers, sur le disque entier) Wifi: IoT IMT Nord Europe","title":"OS Instalation on PC Work Station"},{"location":"configure-station/#first-login","text":"You can process to a classical install from install-station script or go on Manual Install section. Attention, the script also install ROS in desktop configuration. cd git clone https://github.com/imt-mobisyst/mb6-space cd mb6-spqce .bin/install-station","title":"First login:"},{"location":"configure-station/#manual-install","text":"Well, install-station script into an editor, and process the command manually. Comment in the scripts helps to adapt the installation you want.","title":"Manual Install"},{"location":"configure-station/#first-login_1","text":"","title":"First login:"},{"location":"f.a.q/","text":"Frequent Asked Questions Comment configurer aux petits oignon sudo ? sudo est parram\u00e9trable et permet d'autoriser finnement les acc\u00e9s et les droits des utilisateur sur les action senssible sur la machine. Le plus simple est de creer des fichiers de config sp\u00e9cifique dans le r\u00e9p\u00e9toire appropri\u00e9: sudo mkdir /etc/sudoers.d # si besoin sudo touch /etc/sudoers.d/myConfigs Il est donc possible d'autoriser un utilisateur sur une commande sp\u00e9cifique par exemple (la commande whereis xxx permet de r\u00e9cup\u00e9rer le chemin sur une commande xxx ): User ALL=(ALL:ALL) /path/cmd Et m\u00eame l'autoriser \u00e0 le faire sans mot de passe: User ALL=(ALL:ALL) NOPASSWD: /path/cmd Par exemple pour autoriser l'usage d'apt: sudo nano /etc/sudoers.d/apt #puis: bot ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt #et ctrl-s, ctrl-x pour sauver et quiter O\u00f9, si l'on veut \u00eatre plus sp\u00e9cifique: bot ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt upgrade","title":"F.A.Q"},{"location":"f.a.q/#frequent-asked-questions","text":"","title":"Frequent Asked Questions"},{"location":"f.a.q/#comment-configurer-aux-petits-oignon-sudo","text":"sudo est parram\u00e9trable et permet d'autoriser finnement les acc\u00e9s et les droits des utilisateur sur les action senssible sur la machine. Le plus simple est de creer des fichiers de config sp\u00e9cifique dans le r\u00e9p\u00e9toire appropri\u00e9: sudo mkdir /etc/sudoers.d # si besoin sudo touch /etc/sudoers.d/myConfigs Il est donc possible d'autoriser un utilisateur sur une commande sp\u00e9cifique par exemple (la commande whereis xxx permet de r\u00e9cup\u00e9rer le chemin sur une commande xxx ): User ALL=(ALL:ALL) /path/cmd Et m\u00eame l'autoriser \u00e0 le faire sans mot de passe: User ALL=(ALL:ALL) NOPASSWD: /path/cmd Par exemple pour autoriser l'usage d'apt: sudo nano /etc/sudoers.d/apt #puis: bot ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt #et ctrl-s, ctrl-x pour sauver et quiter O\u00f9, si l'on veut \u00eatre plus sp\u00e9cifique: bot ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt upgrade","title":"Comment configurer aux petits oignon sudo ?"},{"location":"install/","text":"Manual Installation This install process follows the instruction on docs.ros.org In short : sudo apt install -y curl software-properties-common sudo add-apt-repository universe -y sudo curl -sSL https://raw.githubusercontent.com/ros/ROS_DISTRO/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update sudo apt install -y ros-dev-tools # ament-cmake-python Then install (use one of the options): sudo apt install -y ros-iron-ros-base # for minimal install sudo apt install -y ros-iron-desktop # for developers install (include visualtization etc.) sudo apt install -y ros-iron-desktop-full # for not missing anything You can setup your terminal with ROS2 environment: source /opt/ros/iron/setup.bash Hello-World with ROS2 This workspace include a default simple ROS package draft-mb6 into pkg-draft directory. You can build it with colcon build , then, inform your environment of the existance of new ROS resources source ./install/setup.bash . In fact, the run-commands.bash would also do the job ( source ./install/setup.bash ). You can make your own run-commands.bash and automitically source this on your terminal... echo \" # mb6 ROS environment: source ~/mb6-space/bin/run-commands.bash\" >> ~/.bashrc (optional) you can add a domain-id to allow several ROS2 virtual networks to work on a same phisical network ( doc ) export ROS_DOMAIN_ID=42 Push the source and export commands on your bashrc file. Finally launch a talker and a listerner in two terminals ros2 run draft_mb6 py_listerner and ros2 run draft_mb6 cpp_talker . For going further follow the draft tutorirals: ROS2 introduction package create python node cpp node Hokuyo Laser Range Just use the urg_node form the ROS urg_node package. It requires that the linux user is in dialout group. sudo apt install -y ros-iron-urg-node sudo usermod -a -G dialout `whoami` RealSense Use the vcpkg tool as recommended . cd git clone https://github.com/Microsoft/vcpkg.git .vcpkg ~/.vcpkg/bootstrap-vcpkg.sh ~/.vcpkg/vcpkg install realsense2 pip install pyrealsense2 You can connect the camera and test with ./bin/test-realsense-cam.py script. Gazebo Simulation ROS compliant version of gazebo can be installed from ros-iron-gazebo-xxx packeges. The install-gazebo script provide the list of usefull packages. More on Gazebo-Ros: docs.ros.org The IMT-MobiSyst simulated Robot is configured on a specific repo: git clone https://github.com/imt-mobisyst/pkg-tsim source ./bin/run-commands.bash ./bin/install-gazebo git clone https://github.com/imt-mobisyst/pkg-tsim colcon build Cuda IMT-Mobisyst packages Your mb6-space workspace is now ready to welcome robotic packages. Depending of your need, you can install and build the relevant mb6's packages...","title":"Manual Install"},{"location":"install/#manual-installation","text":"This install process follows the instruction on docs.ros.org In short : sudo apt install -y curl software-properties-common sudo add-apt-repository universe -y sudo curl -sSL https://raw.githubusercontent.com/ros/ROS_DISTRO/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update sudo apt install -y ros-dev-tools # ament-cmake-python Then install (use one of the options): sudo apt install -y ros-iron-ros-base # for minimal install sudo apt install -y ros-iron-desktop # for developers install (include visualtization etc.) sudo apt install -y ros-iron-desktop-full # for not missing anything You can setup your terminal with ROS2 environment: source /opt/ros/iron/setup.bash","title":"Manual Installation"},{"location":"install/#hello-world-with-ros2","text":"This workspace include a default simple ROS package draft-mb6 into pkg-draft directory. You can build it with colcon build , then, inform your environment of the existance of new ROS resources source ./install/setup.bash . In fact, the run-commands.bash would also do the job ( source ./install/setup.bash ). You can make your own run-commands.bash and automitically source this on your terminal... echo \" # mb6 ROS environment: source ~/mb6-space/bin/run-commands.bash\" >> ~/.bashrc (optional) you can add a domain-id to allow several ROS2 virtual networks to work on a same phisical network ( doc ) export ROS_DOMAIN_ID=42 Push the source and export commands on your bashrc file. Finally launch a talker and a listerner in two terminals ros2 run draft_mb6 py_listerner and ros2 run draft_mb6 cpp_talker . For going further follow the draft tutorirals: ROS2 introduction package create python node cpp node Hokuyo Laser Range Just use the urg_node form the ROS urg_node package. It requires that the linux user is in dialout group. sudo apt install -y ros-iron-urg-node sudo usermod -a -G dialout `whoami` RealSense Use the vcpkg tool as recommended . cd git clone https://github.com/Microsoft/vcpkg.git .vcpkg ~/.vcpkg/bootstrap-vcpkg.sh ~/.vcpkg/vcpkg install realsense2 pip install pyrealsense2 You can connect the camera and test with ./bin/test-realsense-cam.py script. Gazebo Simulation ROS compliant version of gazebo can be installed from ros-iron-gazebo-xxx packeges. The install-gazebo script provide the list of usefull packages. More on Gazebo-Ros: docs.ros.org The IMT-MobiSyst simulated Robot is configured on a specific repo: git clone https://github.com/imt-mobisyst/pkg-tsim source ./bin/run-commands.bash ./bin/install-gazebo git clone https://github.com/imt-mobisyst/pkg-tsim colcon build Cuda","title":"Hello-World with ROS2"},{"location":"install/#imt-mobisyst-packages","text":"Your mb6-space workspace is now ready to welcome robotic packages. Depending of your need, you can install and build the relevant mb6's packages...","title":"IMT-Mobisyst packages"},{"location":"pkg-basic/","text":"Packages: Basic Those packages regroups simple and basic tools mostly for testing and illustrate ROS2 features. Packages: basic_msg : Dedicated to define specifics ROS2 messages. basic_node :","title":"Basic"},{"location":"pkg-basic/#packages-basic","text":"Those packages regroups simple and basic tools mostly for testing and illustrate ROS2 features.","title":"Packages: Basic"},{"location":"pkg-basic/#packages","text":"basic_msg : Dedicated to define specifics ROS2 messages. basic_node :","title":"Packages:"},{"location":"pkg-multibot/","text":"Package MultiBot","title":"Package MultiBot"},{"location":"pkg-multibot/#package-multibot","text":"","title":"Package MultiBot"},{"location":"robot-ezbot/","text":"","title":"Ezbot"},{"location":"robot-pibot/","text":"Pibot Robot ros2 launch slam_toolbox online_sync_launch.py The mobile robot Pibot is built on top of a Kobuki an Hokuyo laser range supervised with a raspberry-Pi3 computer card. The ROS2 middleware is adapted to this configuration in the pkg-tbot project. A pibotXX is automaticaly configured on IOT IMT Nord Europe WiFi with a fixed IP : 10.89.5.XX . Get Started. After turning on the robot, the control software is started. At this point the robot is already ready to be controled. The operator from its computer station need to identify and configure the Pibot domain identifier (Domain_ID) and then start a teleop for instance. Pibot is automaticly connected to IOT IMT Nord Europe WiFi (be sure that your computer is on the same network) with a Domain_ID matching its Pibot number. For instance pibot22 is configured with 22 . On your ROS terminal: export ROS_DOMAIN_ID=22 ros2 node list ros2 topic list At this point, you can verify that laser is publishing data into the /scan topic and that multiplexer node is started. The multiplexer from basic_node package, listen to several command sources to select the most appropriate one. So you can take control with a classical teleop node connected to the multi/cmd_teleop topic, start slam capability etc... ros2 run teleop_twist_keyboard teleop_twist_keyboard cmd_vel:=/multi/cmd_teleop ros2 launch slam_toolbox online_sync_launch.py ... To notice that your autonomous control should send velocity messages to multi/cmd_nav ( /multi/cmd_teleop is reserved to human teleoperation). Get Started v2 (from mb6_sapce ) From mb6_sapce directory, it is possible to configure once for all the ROS_DOMAIN_ID by editing the config.toml and sourcing ./bin/run-commands.bash cd /path/to/mb6_space gedit config.toml source ./bin/run-commands.bash Each new terminal will be open on the same configuration. You can then, connect your __pibotXX_ with rviz2 . rviz2 rviz-conf/simple-pibot.rviz you can also try SLAM : # Terminal 1 ros2 launch slam_toolbox online_sync_launch.py # Terminal 2 rviz2 rviz-conf/pibot-with-map.rviz Get Started v3 (hard linked) Pibot Configuration Pibot relies on several ros packages: [mb6-space] on the pibot branch for install and service configuration. pkg-tbot for Kobuki + laser drivers and configurations. pkg-basic to allow basic/simple controls and tools. Shutdown Check List Connectect the Pibot with SSH . sudo poweroff ou sudo shutdown -h now . Wait to be sure the shutdown process is terminated. Switch-off the robot. Plug the robot to permit its recharge.","title":"Pibot"},{"location":"robot-pibot/#pibot-robot","text":"ros2 launch slam_toolbox online_sync_launch.py The mobile robot Pibot is built on top of a Kobuki an Hokuyo laser range supervised with a raspberry-Pi3 computer card. The ROS2 middleware is adapted to this configuration in the pkg-tbot project. A pibotXX is automaticaly configured on IOT IMT Nord Europe WiFi with a fixed IP : 10.89.5.XX .","title":"Pibot Robot"},{"location":"robot-pibot/#get-started","text":"After turning on the robot, the control software is started. At this point the robot is already ready to be controled. The operator from its computer station need to identify and configure the Pibot domain identifier (Domain_ID) and then start a teleop for instance. Pibot is automaticly connected to IOT IMT Nord Europe WiFi (be sure that your computer is on the same network) with a Domain_ID matching its Pibot number. For instance pibot22 is configured with 22 . On your ROS terminal: export ROS_DOMAIN_ID=22 ros2 node list ros2 topic list At this point, you can verify that laser is publishing data into the /scan topic and that multiplexer node is started. The multiplexer from basic_node package, listen to several command sources to select the most appropriate one. So you can take control with a classical teleop node connected to the multi/cmd_teleop topic, start slam capability etc... ros2 run teleop_twist_keyboard teleop_twist_keyboard cmd_vel:=/multi/cmd_teleop ros2 launch slam_toolbox online_sync_launch.py ... To notice that your autonomous control should send velocity messages to multi/cmd_nav ( /multi/cmd_teleop is reserved to human teleoperation).","title":"Get Started."},{"location":"robot-pibot/#get-started-v2-from-mb6_sapce","text":"From mb6_sapce directory, it is possible to configure once for all the ROS_DOMAIN_ID by editing the config.toml and sourcing ./bin/run-commands.bash cd /path/to/mb6_space gedit config.toml source ./bin/run-commands.bash Each new terminal will be open on the same configuration. You can then, connect your __pibotXX_ with rviz2 . rviz2 rviz-conf/simple-pibot.rviz you can also try SLAM : # Terminal 1 ros2 launch slam_toolbox online_sync_launch.py # Terminal 2 rviz2 rviz-conf/pibot-with-map.rviz","title":"Get Started v2 (from mb6_sapce)"},{"location":"robot-pibot/#get-started-v3-hard-linked","text":"","title":"Get Started v3 (hard linked)"},{"location":"robot-pibot/#pibot-configuration","text":"Pibot relies on several ros packages: [mb6-space] on the pibot branch for install and service configuration. pkg-tbot for Kobuki + laser drivers and configurations. pkg-basic to allow basic/simple controls and tools.","title":"Pibot Configuration"},{"location":"robot-pibot/#shutdown-check-list","text":"Connectect the Pibot with SSH . sudo poweroff ou sudo shutdown -h now . Wait to be sure the shutdown process is terminated. Switch-off the robot. Plug the robot to permit its recharge.","title":"Shutdown Check List"},{"location":"robot-stage/","text":"Simulated Robot with Stage. Stage for ROS2: On github: tuw-robotics stage_ros2 Install process: ./bin/install-stage Simple launch: ros2 launch stage_ros2 stage.launch.py world:=cave enforce_prefixes:=false one_tf_tree:=true","title":"Stage"},{"location":"robot-stage/#simulated-robot-with-stage","text":"Stage for ROS2: On github: tuw-robotics stage_ros2 Install process: ./bin/install-stage Simple launch: ros2 launch stage_ros2 stage.launch.py world:=cave enforce_prefixes:=false one_tf_tree:=true","title":"Simulated Robot with Stage."}]}