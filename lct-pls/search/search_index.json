{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lecture: Python Libs pour la Science","title":"Intro au cours"},{"location":"#lecture-python-libs-pour-la-science","text":"","title":"Lecture: Python Libs pour la Science"},{"location":"basis-01-exo/","text":"System and Python Basis - Exercises Exercise: Search for a User's Groups Create a script returning the names (print) of all groups associated with the user. Always process in an incremental way: Decompose the module to develop Implement it step by step Test the solution at each step Initialize your project: Make a new directory : python-data-science for instance. Edit a new Python file: search-group.py with gedit for instance. Test a hello-world script python3 search-group.py Load ressources Open a file and read-it line by line Apply it to /etc/passwd then /etc/group I do not know how to open a file ? search the web... w3schools Search for a specific word (user name) in a lines Detect for bob user in lines Print only lines with bob inside There is a lot of string methods in Python (for instance, still in W3School ) and one of them seems very interesting: find() . Another one split() allows for decomposing a long string regarding a separator character. Reduce to user's Groups Select only the primary group name in /etc/passwd file for the user bob . Select each group name in /etc/groups , each time bob is present. Exercise: Script as a shell command The goal is to transform search-group.py code into a shell command, executable like anyother. Get user name as a command argument For that, use the sys.argv from the Python package sys . This variable provides the list of the command line arguments. In the Shell We aim to call our program by masking the need for the Python3 interpreter. Like that: search-user bob Version 1 : By using an alias (typically alias search-user='python3 search-user.py' ) Version 2 : By using a shebang , to identify the interpreter inside the Python script, and by setting the script executable chmod +x . Anywhere The script is only accessible from the current directory. Resolve this problem Version 1 : Modify the alias definition with a global path to the script. Version 2 : Add the current directory to the PATH variable ( export PATH=$PATH:~/path/to/ ) Anytime The alais or exports are not available in a new shell. To make them automatically defined, you may add the appropriate lines to your local .bashrc file. This file allows the users to tune their bash shell at start time. Exercise: Increased Command split() is restrictive to much for extracting some element from a string ? Take a look at Regular Expression in Python w3school Handle bugs (no user name in arguments, ...) Add options to your command: --help or -h for help, -i for printing group ids, -t to test if the user is in a specific group, ...","title":"First exos"},{"location":"basis-01-exo/#system-and-python-basis-exercises","text":"","title":"System and Python Basis - Exercises"},{"location":"basis-01-exo/#exercise-search-for-a-users-groups","text":"Create a script returning the names (print) of all groups associated with the user. Always process in an incremental way: Decompose the module to develop Implement it step by step Test the solution at each step","title":"Exercise: Search for a User's Groups"},{"location":"basis-01-exo/#initialize-your-project","text":"Make a new directory : python-data-science for instance. Edit a new Python file: search-group.py with gedit for instance. Test a hello-world script python3 search-group.py","title":"Initialize your project:"},{"location":"basis-01-exo/#load-ressources","text":"Open a file and read-it line by line Apply it to /etc/passwd then /etc/group I do not know how to open a file ? search the web... w3schools","title":"Load ressources"},{"location":"basis-01-exo/#search-for-a-specific-word-user-name-in-a-lines","text":"Detect for bob user in lines Print only lines with bob inside There is a lot of string methods in Python (for instance, still in W3School ) and one of them seems very interesting: find() . Another one split() allows for decomposing a long string regarding a separator character.","title":"Search for a specific word (user name) in a lines"},{"location":"basis-01-exo/#reduce-to-users-groups","text":"Select only the primary group name in /etc/passwd file for the user bob . Select each group name in /etc/groups , each time bob is present.","title":"Reduce to user's Groups"},{"location":"basis-01-exo/#exercise-script-as-a-shell-command","text":"The goal is to transform search-group.py code into a shell command, executable like anyother.","title":"Exercise: Script as a shell command"},{"location":"basis-01-exo/#get-user-name-as-a-command-argument","text":"For that, use the sys.argv from the Python package sys . This variable provides the list of the command line arguments.","title":"Get user name as a command argument"},{"location":"basis-01-exo/#in-the-shell","text":"We aim to call our program by masking the need for the Python3 interpreter. Like that: search-user bob Version 1 : By using an alias (typically alias search-user='python3 search-user.py' ) Version 2 : By using a shebang , to identify the interpreter inside the Python script, and by setting the script executable chmod +x .","title":"In the Shell"},{"location":"basis-01-exo/#anywhere","text":"The script is only accessible from the current directory. Resolve this problem Version 1 : Modify the alias definition with a global path to the script. Version 2 : Add the current directory to the PATH variable ( export PATH=$PATH:~/path/to/ )","title":"Anywhere"},{"location":"basis-01-exo/#anytime","text":"The alais or exports are not available in a new shell. To make them automatically defined, you may add the appropriate lines to your local .bashrc file. This file allows the users to tune their bash shell at start time.","title":"Anytime"},{"location":"basis-01-exo/#exercise-increased-command","text":"split() is restrictive to much for extracting some element from a string ? Take a look at Regular Expression in Python w3school Handle bugs (no user name in arguments, ...) Add options to your command: --help or -h for help, -i for printing group ids, -t to test if the user is in a specific group, ...","title":"Exercise: Increased Command"},{"location":"basis-01-system/","text":"The basics: The computer and the program At the beginning was the Shell : A computer program that exposes an operating system's services to a human user or other programs. ( Wikipedia - Sep. 2023 ) (also named a terminal ) Some Vocabulary: Prompt : A command prompt (or just prompt) state in the command-line interface indicating readiness to accept commands. Command : an instruction received via an external interface that directs the behavior of a computer program. In other terms, a call to a program with potentially specific attributes. First BASH Commands. Bash is the most popular Unix/Linux shell, available by default on most Linux distribution. It is also natively supported on Apple, and versions of Bash can be installed with tools like MinGW on Windows However, most of the commands presented here exist in other Shell or have some equivalents. The File System First of all, some commands allow a user to navigate in file systems et interact with it. ls - list directory elements cd - change directory cat - read all a text file more - read a text file step by step touch - touch a resource (create it) nano - edit a text file rm - remove a file (permanently) mkdir - create (make) a directory rmdir - remove a directory mv - move a resource cp - copy-paste a file clear - clear your promt Most of this commands manipulate paths - a description of where to find a resource on the computer -. / - the root directory in Linux system - example: du /bin/bash (du - estimate file space usage) . - the current directory - example: mkdir ./workspace .. - the parent directory - example: cd ../../media ~ - the user directory (home) - example: cd ~/Documents CApitAl Letters maTer - example: cd ~/Documents \\(\\neq\\) cd ~/documents Mastering Commands Most of the commands accept arguments and options. With a simplistic vision, the argument gives a target to the command execution, while options permit the user to change the context execution of the command. Classical syntax: command --option -o argument - example: ls -a ~ Some commands permit manipulating the command collection. man - command and library manuel - example: man cp apropos - search in the manuels - example: apropos search whereis - find the location of a resource - example: whereis python3 alias - create our own command - example: alias listall=\"ls -a\" Some triks : tabulation : auto-complete the command line or list the possibilities !xx : run again the last command starting with xx ctrl-r : search for a command in command history Q : quit a runnig program (in most programs) ctr-c : terminate a running program ~/.bashrc : file: user configuration routine Users session On Linux, users are clearly identified everywhere. All resources have owners, and users can be limited in their capacities on the system. Users can be artificially set, they are not necessarily real human beings. session A session is an active connection to a system or program. who - list the open session in a computer su : start a new session as a specific user - example: su bob ssh - open a session in a distant computer following the ssh protocol A user session is associate to an environement. computer system or set of systems in which a computer program or software component is deployed and executed ( Wikipedia Sept. 2023 ). env - list the environment variable. $ - access a variable - example: echo $PATH $PATH - list of all directories where bash search the commands. $SHELL - the current shell interpreter. $USER - the user name. export - create a new variable - example: export MYBIN=~/bin ~/.bashrc (file): user configuration commands. User, Group and Rules Users are structured with groups . Users as groups have a name and a number A user is defined with a primary group , its main group, but a group can include several users. The files /etc/passwd and /etc/group record that information, among others. List them with cat for example ( cat /etc/passwd and cat /etc/group ). Specific access is associated to each resource on the computer with r : read \\(\\quad\\) w : write \\(\\quad\\) x : executed/open. The triple authorization can be different for the user owner, the group owner, or all the others. List command with the -l option gives ownership and authorization information, among others. For example, with ls -l /etc Manipulate the owner and authorizations: chmod : change authorizations - Examples: chmod +x aFile - add x authorization on aFile chmod 752 aFile - set authorization on aFile on a binary style chown : change the owner sudo : excute a command as a root user (administrator) if granted - example sudo gedit /etc/passwd . The Processes Finally, the Operating System (OS) is mainly a process manager... An OS offers an environment to create and execute programs. Typically, the language C is first developed in parallel to Unix to provide a powerful language to the OS, and to use it for the OS core processes. Today, systems have evolved significantly and allow complex architecture with several processes running in parallel and potentially in virtual machines. Similarly than ls , ps list the local processes (ie. the children processes of the bash shell. For instance: gedit aFile.txt & ps Here, & permits to get the prompt back after starting gedit . As for other commands, ps accepts options, for instance, adding -e lists all the processes on the machine. For managing processes, OS attaches some elements to each one: the PID (Process IDentifier), a parent process, an owner, a name, ... Other command : top - interactive process monitoring ( Q to quit ) (quite similar to ps , but interactive and constantly updated) kill - sent a signal to a process - Examples: kill 19482 - send TERM signal to process 19482 ; kill -s KILL 19482 - send KILL signal to process 19482 Codes, Programs and Scripts Codes : Sequence of written instruction text format according to a given programming language. Programs : Executable binary on a OS Specific to the OS (and potentially to the hardware) Generally compiled codes (example with C language compiled with gcc ). Scripts : Interpretable pieces of code by a program. Typically, Python is a scripting language. file: hello.py Python Programming Languages Python is a high level programming language. Its allows for abstracted data structures, includes core tools like dynamic type , garbage collector , Object-Oriented Programming (OOP) and a lot more with a large collection of libraries. The language is interpreted, and python3 designs the programming language but also the interpreter process ( cpython ), allowing to read and execute Python instructions. Code source on github.com - 63.5% Python / 34.6% C Minimale python script: print('hello world') Then in a shell: python3 hello.py Python in short: Rich language capabilities (it is possible to do complex things) Concise language (complex things require few codes) Very rich community libraries (most of the complex things are already implemented) Interpretable (the code is mostly OS independent) Use a virtual machine (including Garbage Collector) Not natively efficient (but compatible with C and C++ libs) Sequential Instructions Python is structured with sequential instructions: # Some comments... a= 1 # - Asignment of a new integer variable b= a + 48.4 # - Asignment of a new floating point variable # as the result of the instruction: a + 48.4 aString= \"Hello\" # - Assignment of a new string variable (list of characters) print( aString ) # - Call to the function print with aString as one parameter result= aString.search('e') # - Call to the method search on the aString instance # with a parameter 'e' It allows for function definition. def myWonderfullFunction( aFirstIntergerPaprameter, aSecondIntergerParameters ): intergerSum= aFirstIntergerPaprameter + aSecondIntergerParameters return intergerSum a= 2 b= myWonderfullFunction( a, 40 ) print( \"Result: \" + str(b) ) To notice: Block separation is delimited with space or tabulation indentation. Functions need to be defined prior to be used. loop control Loops allow for repeating an instruction sequence until a specific state is reached ( while ) or by visiting a collection of objects ( for ). The while instruction ( WHILE condition DO something ) is the simplest available loop control: b= 0 while b <= 40 : b+= 2 print( \"Result: \" + str(b) ) The for instruction allows for visiting each element of an iterable collection, for instance a list. aList= [2, 10, 18, 4, 8] b= 0 for value in aList : b+= value print( \"Result: \" + str(b) ) Going further... It is not the purpose here, to provide an entire course on Python . There are huge resources on the internet, both more complete and well organized, starting with the official Python documentation https://docs.python.org/3/ . We highly recommend searching the web to increase your knowledge. In this jungle, the w3schools certainly offers the best learning experience. You can start, for instance, with Python lists and Python dictionaries , the two most used data structures in Python. Finally, complementary modules / packages can be associated to the code with the import instruction. Typically sys package provides some interfaces with the system. import sys print( \"System platform: \"+ str(sys.platform) )","title":"OS et language"},{"location":"basis-01-system/#the-basics-the-computer-and-the-program","text":"","title":"The basics: The computer and the program"},{"location":"basis-01-system/#at-the-beginning-was-the-shell","text":"A computer program that exposes an operating system's services to a human user or other programs. ( Wikipedia - Sep. 2023 ) (also named a terminal )","title":"At the beginning was the Shell :"},{"location":"basis-01-system/#some-vocabulary","text":"Prompt : A command prompt (or just prompt) state in the command-line interface indicating readiness to accept commands. Command : an instruction received via an external interface that directs the behavior of a computer program. In other terms, a call to a program with potentially specific attributes.","title":"Some Vocabulary:"},{"location":"basis-01-system/#first-bash-commands","text":"Bash is the most popular Unix/Linux shell, available by default on most Linux distribution. It is also natively supported on Apple, and versions of Bash can be installed with tools like MinGW on Windows However, most of the commands presented here exist in other Shell or have some equivalents.","title":"First BASH Commands."},{"location":"basis-01-system/#the-file-system","text":"First of all, some commands allow a user to navigate in file systems et interact with it. ls - list directory elements cd - change directory cat - read all a text file more - read a text file step by step touch - touch a resource (create it) nano - edit a text file rm - remove a file (permanently) mkdir - create (make) a directory rmdir - remove a directory mv - move a resource cp - copy-paste a file clear - clear your promt Most of this commands manipulate paths - a description of where to find a resource on the computer -. / - the root directory in Linux system - example: du /bin/bash (du - estimate file space usage) . - the current directory - example: mkdir ./workspace .. - the parent directory - example: cd ../../media ~ - the user directory (home) - example: cd ~/Documents CApitAl Letters maTer - example: cd ~/Documents \\(\\neq\\) cd ~/documents","title":"The File System"},{"location":"basis-01-system/#mastering-commands","text":"Most of the commands accept arguments and options. With a simplistic vision, the argument gives a target to the command execution, while options permit the user to change the context execution of the command. Classical syntax: command --option -o argument - example: ls -a ~ Some commands permit manipulating the command collection. man - command and library manuel - example: man cp apropos - search in the manuels - example: apropos search whereis - find the location of a resource - example: whereis python3 alias - create our own command - example: alias listall=\"ls -a\"","title":"Mastering Commands"},{"location":"basis-01-system/#some-triks","text":"tabulation : auto-complete the command line or list the possibilities !xx : run again the last command starting with xx ctrl-r : search for a command in command history Q : quit a runnig program (in most programs) ctr-c : terminate a running program ~/.bashrc : file: user configuration routine","title":"Some triks :"},{"location":"basis-01-system/#users-session","text":"On Linux, users are clearly identified everywhere. All resources have owners, and users can be limited in their capacities on the system. Users can be artificially set, they are not necessarily real human beings.","title":"Users session"},{"location":"basis-01-system/#session","text":"A session is an active connection to a system or program. who - list the open session in a computer su : start a new session as a specific user - example: su bob ssh - open a session in a distant computer following the ssh protocol A user session is associate to an environement. computer system or set of systems in which a computer program or software component is deployed and executed ( Wikipedia Sept. 2023 ). env - list the environment variable. $ - access a variable - example: echo $PATH $PATH - list of all directories where bash search the commands. $SHELL - the current shell interpreter. $USER - the user name. export - create a new variable - example: export MYBIN=~/bin ~/.bashrc (file): user configuration commands.","title":"session"},{"location":"basis-01-system/#user-group-and-rules","text":"Users are structured with groups . Users as groups have a name and a number A user is defined with a primary group , its main group, but a group can include several users. The files /etc/passwd and /etc/group record that information, among others. List them with cat for example ( cat /etc/passwd and cat /etc/group ). Specific access is associated to each resource on the computer with r : read \\(\\quad\\) w : write \\(\\quad\\) x : executed/open. The triple authorization can be different for the user owner, the group owner, or all the others. List command with the -l option gives ownership and authorization information, among others. For example, with ls -l /etc Manipulate the owner and authorizations: chmod : change authorizations - Examples: chmod +x aFile - add x authorization on aFile chmod 752 aFile - set authorization on aFile on a binary style chown : change the owner sudo : excute a command as a root user (administrator) if granted - example sudo gedit /etc/passwd .","title":"User, Group and Rules"},{"location":"basis-01-system/#the-processes","text":"Finally, the Operating System (OS) is mainly a process manager... An OS offers an environment to create and execute programs. Typically, the language C is first developed in parallel to Unix to provide a powerful language to the OS, and to use it for the OS core processes. Today, systems have evolved significantly and allow complex architecture with several processes running in parallel and potentially in virtual machines. Similarly than ls , ps list the local processes (ie. the children processes of the bash shell. For instance: gedit aFile.txt & ps Here, & permits to get the prompt back after starting gedit . As for other commands, ps accepts options, for instance, adding -e lists all the processes on the machine. For managing processes, OS attaches some elements to each one: the PID (Process IDentifier), a parent process, an owner, a name, ... Other command : top - interactive process monitoring ( Q to quit ) (quite similar to ps , but interactive and constantly updated) kill - sent a signal to a process - Examples: kill 19482 - send TERM signal to process 19482 ; kill -s KILL 19482 - send KILL signal to process 19482","title":"The Processes"},{"location":"basis-01-system/#codes-programs-and-scripts","text":"Codes : Sequence of written instruction text format according to a given programming language. Programs : Executable binary on a OS Specific to the OS (and potentially to the hardware) Generally compiled codes (example with C language compiled with gcc ). Scripts : Interpretable pieces of code by a program. Typically, Python is a scripting language. file: hello.py","title":"Codes, Programs and Scripts"},{"location":"basis-01-system/#python-programming-languages","text":"Python is a high level programming language. Its allows for abstracted data structures, includes core tools like dynamic type , garbage collector , Object-Oriented Programming (OOP) and a lot more with a large collection of libraries. The language is interpreted, and python3 designs the programming language but also the interpreter process ( cpython ), allowing to read and execute Python instructions. Code source on github.com - 63.5% Python / 34.6% C Minimale python script: print('hello world') Then in a shell: python3 hello.py Python in short: Rich language capabilities (it is possible to do complex things) Concise language (complex things require few codes) Very rich community libraries (most of the complex things are already implemented) Interpretable (the code is mostly OS independent) Use a virtual machine (including Garbage Collector) Not natively efficient (but compatible with C and C++ libs)","title":"Python Programming Languages"},{"location":"basis-01-system/#sequential-instructions","text":"Python is structured with sequential instructions: # Some comments... a= 1 # - Asignment of a new integer variable b= a + 48.4 # - Asignment of a new floating point variable # as the result of the instruction: a + 48.4 aString= \"Hello\" # - Assignment of a new string variable (list of characters) print( aString ) # - Call to the function print with aString as one parameter result= aString.search('e') # - Call to the method search on the aString instance # with a parameter 'e' It allows for function definition. def myWonderfullFunction( aFirstIntergerPaprameter, aSecondIntergerParameters ): intergerSum= aFirstIntergerPaprameter + aSecondIntergerParameters return intergerSum a= 2 b= myWonderfullFunction( a, 40 ) print( \"Result: \" + str(b) ) To notice: Block separation is delimited with space or tabulation indentation. Functions need to be defined prior to be used.","title":"Sequential Instructions"},{"location":"basis-01-system/#loop-control","text":"Loops allow for repeating an instruction sequence until a specific state is reached ( while ) or by visiting a collection of objects ( for ). The while instruction ( WHILE condition DO something ) is the simplest available loop control: b= 0 while b <= 40 : b+= 2 print( \"Result: \" + str(b) ) The for instruction allows for visiting each element of an iterable collection, for instance a list. aList= [2, 10, 18, 4, 8] b= 0 for value in aList : b+= value print( \"Result: \" + str(b) )","title":"loop control"},{"location":"basis-01-system/#going-further","text":"It is not the purpose here, to provide an entire course on Python . There are huge resources on the internet, both more complete and well organized, starting with the official Python documentation https://docs.python.org/3/ . We highly recommend searching the web to increase your knowledge. In this jungle, the w3schools certainly offers the best learning experience. You can start, for instance, with Python lists and Python dictionaries , the two most used data structures in Python. Finally, complementary modules / packages can be associated to the code with the import instruction. Typically sys package provides some interfaces with the system. import sys print( \"System platform: \"+ str(sys.platform) )","title":"Going further..."},{"location":"basis-02-poo/","text":"Object-Oriented Programming Object-Oriented Programing in Python class: first, a collection of class attribute and functions. # Definition: class MyObjectType : world= \"world\" def function1() : return \"hello\" def function2() : return MyObjectType.world # Use: hello= MyObjectType.function1() print( hello + ' ' + MyObjectType.function2() ) Still with indentation... OOP in Python : Class and Instances The possibility to instantiate objects. # Definition: class MyObjectType : class_word= \"hello\" # A class attribute # Use: anInstance= MyObjectType() # Instanciate a MyObjectType object anInstance.instance_word= \"world\" # an instance attribute assert( type(anInstance) is MyObjectType ) print( anInstance.class_word + ' ' + anInstance.instance_word ) At this point: anInstance.class_word is MyObjectType.class_word OOP in Python : Class and Instances ### What is the output of this code ? A good way to manipulate a class attribute: `type(anInstance).classAttribut` # Definition: class MyObjectType : classAttribut= \"Void\" # Use: anInstance= MyObjectType() MyObjectType.classAttribut= \"Hello\" print( anInstance.classAttribut ) anInstance.classAttribut= \"World\" print( MyObjectType.classAttribut ) MyObjectType.classAttribut= \"Hmmm\" print( anInstance.classAttribut ) OOP in Python : Methods Method: an instance functions (the current instance is self by convention) # Definition: class MyObjectType : def method(self) : return 42 # Use: anInstance= MyObjectType() # Instanciate a MyObjectType v1= MyObjectType.method(anInstance) v2= anInstance.method() if v1 == v2 : print( \"Hello World\" ) print( f\"{MyObjectType.method}\\nvs {anInstance.method}\") OOP in Python: Methods Method versus Function # Definition: class MyObjectType : def method(self) : return 42 print( f\"{MyObjectType.method}\\nvs\\n{anInstance.method}\") Output: <function MyObjectType.method at 0x7f36636e7a30> vs <bound method MyObjectType.method of <__main__.MyObjectType object at 0x7f366368c310>> OOP in Python: Methods Example of a method with \\(3\\) arguments def aMethod(self, argument1, argument2, argument3) : pass OOP in Python: default argument values Built-in Methods : Method already defined in python Objects __init__(self) : Instance constructor __del__(self) : Instance destructor __str__(self) : String generation Example: def aFunction() : anInstance= MyClass() # call anInstance.__init__() print( anInstance ) # call anInstance.__str__() return True # garbage call to anInsatnce.__del__() Object-Oriented Programing in Python Constructor : __init__ : initialize a new instance with potentially \\(n\\) arguments class MyClass() : def __init__ ( self, arg1, arg2 ) : self._attribut1= param1 self._attribut2= function( param1, param2 ) anInstance= MyClass( \"Paul\", \"Mouaddib\" ) In Python __init__ method is unique (as all other methods) (i.e. no overloading) Object-Oriented Programing in Python Function with a variable number of arguments - Example: function(1, 2) function(1, 2, 3, 4) Definition: parameters with default values def aFuncrion ( val1=1, val2=0, val3=0, val4=1 ) : return (val1+ val1+ val1) * val4 Alternative Run: function( val4=8 ) Object-Oriented Programing in Python Good Practices: Use self . Prefer instance method (at least self argument). Name your attributes starting with _ . Never access class attributes from instances directly. (Better Class._att or type(instance)._att than instance._att ). __init__ method (if defined) is your first method. Initialize your instance attributes into __init__ method. ... OOP in Python Let's Play Create a class to manipulate Point Cloud Initialize your working space Define instance attributes Propose some initialization Provide accessors Customize built-in methods Develope some usefull methods ... Create a class to manipulate Point Cloud Initialize your working space - two files in a same directory: myCloud.py with class definition . test_myCloud.py a test script with instanciation and call to methods. `myCloud.py`: class Cloud : pass `test_myCloud.py`: import myCloud as mc aCloud= mc.Cloud() assert( type(aCloud) == mc.Cloud ) Then execute: python3 test_myCloud.py Cloud :: Construction and Accessors. As a first functionality the possibility of adding and access points. The test_cloud.py will be: import myCloud as mc aCloud= mc.Cloud() assert( aCloud.size() == 0 ) assert( aCloud.points() == [] ) aCloud.append( 3, 8 ) assert( aCloud.size() == 1 ) assert( aCloud.points() == [(3,8)] ) assert( aCloud.point(0) == (3,8) ) ... Cloud :: More usefull elements Random generator - generate randomly a point cloud of \\(n\\) points. Print function - overdefine __str__ in an informative, not too long way. Exemple: print( aCloud ) > [(12.8, 8.5), (7.8, 0.5), ...](100) Create a class to manipulate Point Cloud More Accessors: listX(): return a list of the x values of all points ( & listY(): reciprocally) Computation: - average(): , standardDeviation() , minXPoint(): , ... ...","title":"OOP"},{"location":"basis-02-poo/#object-oriented-programming","text":"","title":"Object-Oriented Programming"},{"location":"basis-02-poo/#object-oriented-programing-in-python","text":"class: first, a collection of class attribute and functions. # Definition: class MyObjectType : world= \"world\" def function1() : return \"hello\" def function2() : return MyObjectType.world # Use: hello= MyObjectType.function1() print( hello + ' ' + MyObjectType.function2() ) Still with indentation...","title":"Object-Oriented Programing in Python"},{"location":"basis-02-poo/#oop-in-python-class-and-instances","text":"The possibility to instantiate objects. # Definition: class MyObjectType : class_word= \"hello\" # A class attribute # Use: anInstance= MyObjectType() # Instanciate a MyObjectType object anInstance.instance_word= \"world\" # an instance attribute assert( type(anInstance) is MyObjectType ) print( anInstance.class_word + ' ' + anInstance.instance_word ) At this point: anInstance.class_word is MyObjectType.class_word","title":"OOP in Python : Class and Instances"},{"location":"basis-02-poo/#oop-in-python-class-and-instances_1","text":"### What is the output of this code ? A good way to manipulate a class attribute: `type(anInstance).classAttribut` # Definition: class MyObjectType : classAttribut= \"Void\" # Use: anInstance= MyObjectType() MyObjectType.classAttribut= \"Hello\" print( anInstance.classAttribut ) anInstance.classAttribut= \"World\" print( MyObjectType.classAttribut ) MyObjectType.classAttribut= \"Hmmm\" print( anInstance.classAttribut )","title":"OOP in Python : Class and Instances"},{"location":"basis-02-poo/#oop-in-python-methods","text":"Method: an instance functions (the current instance is self by convention) # Definition: class MyObjectType : def method(self) : return 42 # Use: anInstance= MyObjectType() # Instanciate a MyObjectType v1= MyObjectType.method(anInstance) v2= anInstance.method() if v1 == v2 : print( \"Hello World\" ) print( f\"{MyObjectType.method}\\nvs {anInstance.method}\")","title":"OOP in Python : Methods"},{"location":"basis-02-poo/#oop-in-python-methods_1","text":"","title":"OOP in Python: Methods"},{"location":"basis-02-poo/#method-versus-function","text":"# Definition: class MyObjectType : def method(self) : return 42 print( f\"{MyObjectType.method}\\nvs\\n{anInstance.method}\") Output: <function MyObjectType.method at 0x7f36636e7a30> vs <bound method MyObjectType.method of <__main__.MyObjectType object at 0x7f366368c310>>","title":"Method versus Function"},{"location":"basis-02-poo/#oop-in-python-methods_2","text":"","title":"OOP in Python: Methods"},{"location":"basis-02-poo/#example-of-a-method-with-3-arguments","text":"def aMethod(self, argument1, argument2, argument3) : pass","title":"Example of a method with \\(3\\) arguments"},{"location":"basis-02-poo/#oop-in-python-default-argument-values","text":"Built-in Methods : Method already defined in python Objects __init__(self) : Instance constructor __del__(self) : Instance destructor __str__(self) : String generation Example: def aFunction() : anInstance= MyClass() # call anInstance.__init__() print( anInstance ) # call anInstance.__str__() return True # garbage call to anInsatnce.__del__()","title":"OOP in Python: default argument values"},{"location":"basis-02-poo/#object-oriented-programing-in-python_1","text":"Constructor : __init__ : initialize a new instance with potentially \\(n\\) arguments class MyClass() : def __init__ ( self, arg1, arg2 ) : self._attribut1= param1 self._attribut2= function( param1, param2 ) anInstance= MyClass( \"Paul\", \"Mouaddib\" ) In Python __init__ method is unique (as all other methods) (i.e. no overloading)","title":"Object-Oriented Programing in Python"},{"location":"basis-02-poo/#object-oriented-programing-in-python_2","text":"Function with a variable number of arguments - Example: function(1, 2) function(1, 2, 3, 4) Definition: parameters with default values def aFuncrion ( val1=1, val2=0, val3=0, val4=1 ) : return (val1+ val1+ val1) * val4 Alternative Run: function( val4=8 )","title":"Object-Oriented Programing in Python"},{"location":"basis-02-poo/#object-oriented-programing-in-python_3","text":"Good Practices: Use self . Prefer instance method (at least self argument). Name your attributes starting with _ . Never access class attributes from instances directly. (Better Class._att or type(instance)._att than instance._att ). __init__ method (if defined) is your first method. Initialize your instance attributes into __init__ method. ... OOP in Python Let's Play","title":"Object-Oriented Programing in Python"},{"location":"basis-02-poo/#create-a-class-to-manipulate-point-cloud","text":"Initialize your working space Define instance attributes Propose some initialization Provide accessors Customize built-in methods Develope some usefull methods ...","title":"Create a class to manipulate Point Cloud"},{"location":"basis-02-poo/#create-a-class-to-manipulate-point-cloud_1","text":"Initialize your working space - two files in a same directory: myCloud.py with class definition . test_myCloud.py a test script with instanciation and call to methods. `myCloud.py`: class Cloud : pass `test_myCloud.py`: import myCloud as mc aCloud= mc.Cloud() assert( type(aCloud) == mc.Cloud ) Then execute: python3 test_myCloud.py","title":"Create a class to manipulate Point Cloud"},{"location":"basis-02-poo/#cloud-construction-and-accessors","text":"As a first functionality the possibility of adding and access points. The test_cloud.py will be: import myCloud as mc aCloud= mc.Cloud() assert( aCloud.size() == 0 ) assert( aCloud.points() == [] ) aCloud.append( 3, 8 ) assert( aCloud.size() == 1 ) assert( aCloud.points() == [(3,8)] ) assert( aCloud.point(0) == (3,8) ) ...","title":"Cloud :: Construction and Accessors."},{"location":"basis-02-poo/#cloud-more-usefull-elements","text":"Random generator - generate randomly a point cloud of \\(n\\) points. Print function - overdefine __str__ in an informative, not too long way. Exemple: print( aCloud ) > [(12.8, 8.5), (7.8, 0.5), ...](100)","title":"Cloud :: More usefull elements"},{"location":"basis-02-poo/#create-a-class-to-manipulate-point-cloud_2","text":"More Accessors: listX(): return a list of the x values of all points ( & listY(): reciprocally) Computation: - average(): , standardDeviation() , minXPoint(): , ... ...","title":"Create a class to manipulate Point Cloud"},{"location":"basis-03-dev/","text":"Developper tools Python, a Modular tool resources: myOwnPkg.py def myWonderfullFunction( aFirstIntergerPaprameter, aSecondIntergerParameters ) intergerSum= aFirstIntergerPaprameter + aSecondIntergerParameters return intergerSum script: myOwnCommand.py import myOwnPkg ... b= myOwnPkg.myWonderfullFunction( a, 40 ) ... Python, a Modular tool Python packages are easy to install with pip tool. pip install tqdm pytest python import relies on environment path variable: import sys print( sys.path )","title":"Develloper"},{"location":"basis-03-dev/#developper-tools","text":"","title":"Developper tools"},{"location":"basis-03-dev/#python-a-modular-tool","text":"resources: myOwnPkg.py def myWonderfullFunction( aFirstIntergerPaprameter, aSecondIntergerParameters ) intergerSum= aFirstIntergerPaprameter + aSecondIntergerParameters return intergerSum script: myOwnCommand.py import myOwnPkg ... b= myOwnPkg.myWonderfullFunction( a, 40 ) ...","title":"Python, a Modular tool"},{"location":"basis-03-dev/#python-a-modular-tool_1","text":"Python packages are easy to install with pip tool. pip install tqdm pytest python import relies on environment path variable: import sys print( sys.path )","title":"Python, a Modular tool"}]}